// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "idpasslite.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace api {
class Certificates;
class CertificatesDefaultTypeInternal;
extern CertificatesDefaultTypeInternal _Certificates_default_instance_;
class Ident;
class IdentDefaultTypeInternal;
extern IdentDefaultTypeInternal _Ident_default_instance_;
class Idents;
class IdentsDefaultTypeInternal;
extern IdentsDefaultTypeInternal _Idents_default_instance_;
class KeySet;
class KeySetDefaultTypeInternal;
extern KeySetDefaultTypeInternal _KeySet_default_instance_;
class byteArray;
class byteArrayDefaultTypeInternal;
extern byteArrayDefaultTypeInternal _byteArray_default_instance_;
class byteArrays;
class byteArraysDefaultTypeInternal;
extern byteArraysDefaultTypeInternal _byteArrays_default_instance_;
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> ::api::Certificates* Arena::CreateMaybeMessage<::api::Certificates>(Arena*);
template<> ::api::Ident* Arena::CreateMaybeMessage<::api::Ident>(Arena*);
template<> ::api::Idents* Arena::CreateMaybeMessage<::api::Idents>(Arena*);
template<> ::api::KeySet* Arena::CreateMaybeMessage<::api::KeySet>(Arena*);
template<> ::api::byteArray* Arena::CreateMaybeMessage<::api::byteArray>(Arena*);
template<> ::api::byteArrays* Arena::CreateMaybeMessage<::api::byteArrays>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace api {

enum byteArray_Typ : int {
  byteArray_Typ_BLOB = 0,
  byteArray_Typ_AEADKEY = 1,
  byteArray_Typ_ED25519PUBKEY = 2,
  byteArray_Typ_ED25519PRIVKEY = 3,
  byteArray_Typ_ED25519SIGNATURE = 4,
  byteArray_Typ_PHOTO = 5,
  byteArray_Typ_byteArray_Typ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  byteArray_Typ_byteArray_Typ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool byteArray_Typ_IsValid(int value);
constexpr byteArray_Typ byteArray_Typ_Typ_MIN = byteArray_Typ_BLOB;
constexpr byteArray_Typ byteArray_Typ_Typ_MAX = byteArray_Typ_PHOTO;
constexpr int byteArray_Typ_Typ_ARRAYSIZE = byteArray_Typ_Typ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* byteArray_Typ_descriptor();
template<typename T>
inline const std::string& byteArray_Typ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, byteArray_Typ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function byteArray_Typ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    byteArray_Typ_descriptor(), enum_t_value);
}
inline bool byteArray_Typ_Parse(
    const std::string& name, byteArray_Typ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<byteArray_Typ>(
    byteArray_Typ_descriptor(), name, value);
}
// ===================================================================

class byteArray PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.byteArray) */ {
 public:
  inline byteArray() : byteArray(nullptr) {};
  virtual ~byteArray();

  byteArray(const byteArray& from);
  byteArray(byteArray&& from) noexcept
    : byteArray() {
    *this = ::std::move(from);
  }

  inline byteArray& operator=(const byteArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline byteArray& operator=(byteArray&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const byteArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const byteArray* internal_default_instance() {
    return reinterpret_cast<const byteArray*>(
               &_byteArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(byteArray& a, byteArray& b) {
    a.Swap(&b);
  }
  inline void Swap(byteArray* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(byteArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline byteArray* New() const final {
    return CreateMaybeMessage<byteArray>(nullptr);
  }

  byteArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<byteArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const byteArray& from);
  void MergeFrom(const byteArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(byteArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.byteArray";
  }
  protected:
  explicit byteArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef byteArray_Typ Typ;
  static constexpr Typ BLOB =
    byteArray_Typ_BLOB;
  static constexpr Typ AEADKEY =
    byteArray_Typ_AEADKEY;
  static constexpr Typ ED25519PUBKEY =
    byteArray_Typ_ED25519PUBKEY;
  static constexpr Typ ED25519PRIVKEY =
    byteArray_Typ_ED25519PRIVKEY;
  static constexpr Typ ED25519SIGNATURE =
    byteArray_Typ_ED25519SIGNATURE;
  static constexpr Typ PHOTO =
    byteArray_Typ_PHOTO;
  static inline bool Typ_IsValid(int value) {
    return byteArray_Typ_IsValid(value);
  }
  static constexpr Typ Typ_MIN =
    byteArray_Typ_Typ_MIN;
  static constexpr Typ Typ_MAX =
    byteArray_Typ_Typ_MAX;
  static constexpr int Typ_ARRAYSIZE =
    byteArray_Typ_Typ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Typ_descriptor() {
    return byteArray_Typ_descriptor();
  }
  template<typename T>
  static inline const std::string& Typ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Typ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Typ_Name.");
    return byteArray_Typ_Name(enum_t_value);
  }
  static inline bool Typ_Parse(const std::string& name,
      Typ* value) {
    return byteArray_Typ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 2,
    kTypFieldNumber = 1,
  };
  // bytes val = 2;
  void clear_val();
  const std::string& val() const;
  void set_val(const std::string& value);
  void set_val(std::string&& value);
  void set_val(const char* value);
  void set_val(const void* value, size_t size);
  std::string* mutable_val();
  std::string* release_val();
  void set_allocated_val(std::string* val);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_val();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_val(
      std::string* val);
  private:
  const std::string& _internal_val() const;
  void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // .api.byteArray.Typ typ = 1;
  void clear_typ();
  ::api::byteArray_Typ typ() const;
  void set_typ(::api::byteArray_Typ value);
  private:
  ::api::byteArray_Typ _internal_typ() const;
  void _internal_set_typ(::api::byteArray_Typ value);
  public:

  // @@protoc_insertion_point(class_scope:api.byteArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  int typ_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class byteArrays PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.byteArrays) */ {
 public:
  inline byteArrays() : byteArrays(nullptr) {};
  virtual ~byteArrays();

  byteArrays(const byteArrays& from);
  byteArrays(byteArrays&& from) noexcept
    : byteArrays() {
    *this = ::std::move(from);
  }

  inline byteArrays& operator=(const byteArrays& from) {
    CopyFrom(from);
    return *this;
  }
  inline byteArrays& operator=(byteArrays&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const byteArrays& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const byteArrays* internal_default_instance() {
    return reinterpret_cast<const byteArrays*>(
               &_byteArrays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(byteArrays& a, byteArrays& b) {
    a.Swap(&b);
  }
  inline void Swap(byteArrays* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(byteArrays* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline byteArrays* New() const final {
    return CreateMaybeMessage<byteArrays>(nullptr);
  }

  byteArrays* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<byteArrays>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const byteArrays& from);
  void MergeFrom(const byteArrays& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(byteArrays* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.byteArrays";
  }
  protected:
  explicit byteArrays(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValsFieldNumber = 1,
  };
  // repeated .api.byteArray vals = 1;
  int vals_size() const;
  private:
  int _internal_vals_size() const;
  public:
  void clear_vals();
  ::api::byteArray* mutable_vals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >*
      mutable_vals();
  private:
  const ::api::byteArray& _internal_vals(int index) const;
  ::api::byteArray* _internal_add_vals();
  public:
  const ::api::byteArray& vals(int index) const;
  ::api::byteArray* add_vals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >&
      vals() const;

  // @@protoc_insertion_point(class_scope:api.byteArrays)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray > vals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class KeySet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.KeySet) */ {
 public:
  inline KeySet() : KeySet(nullptr) {};
  virtual ~KeySet();

  KeySet(const KeySet& from);
  KeySet(KeySet&& from) noexcept
    : KeySet() {
    *this = ::std::move(from);
  }

  inline KeySet& operator=(const KeySet& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeySet& operator=(KeySet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeySet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeySet* internal_default_instance() {
    return reinterpret_cast<const KeySet*>(
               &_KeySet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeySet& a, KeySet& b) {
    a.Swap(&b);
  }
  inline void Swap(KeySet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeySet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeySet* New() const final {
    return CreateMaybeMessage<KeySet>(nullptr);
  }

  KeySet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeySet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeySet& from);
  void MergeFrom(const KeySet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeySet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.KeySet";
  }
  protected:
  explicit KeySet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerificationKeysFieldNumber = 3,
    kEncryptionKeyFieldNumber = 1,
    kSignatureKeyFieldNumber = 2,
  };
  // repeated .api.byteArray verificationKeys = 3;
  int verificationkeys_size() const;
  private:
  int _internal_verificationkeys_size() const;
  public:
  void clear_verificationkeys();
  ::api::byteArray* mutable_verificationkeys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >*
      mutable_verificationkeys();
  private:
  const ::api::byteArray& _internal_verificationkeys(int index) const;
  ::api::byteArray* _internal_add_verificationkeys();
  public:
  const ::api::byteArray& verificationkeys(int index) const;
  ::api::byteArray* add_verificationkeys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >&
      verificationkeys() const;

  // bytes encryptionKey = 1;
  void clear_encryptionkey();
  const std::string& encryptionkey() const;
  void set_encryptionkey(const std::string& value);
  void set_encryptionkey(std::string&& value);
  void set_encryptionkey(const char* value);
  void set_encryptionkey(const void* value, size_t size);
  std::string* mutable_encryptionkey();
  std::string* release_encryptionkey();
  void set_allocated_encryptionkey(std::string* encryptionkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encryptionkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encryptionkey(
      std::string* encryptionkey);
  private:
  const std::string& _internal_encryptionkey() const;
  void _internal_set_encryptionkey(const std::string& value);
  std::string* _internal_mutable_encryptionkey();
  public:

  // bytes signatureKey = 2;
  void clear_signaturekey();
  const std::string& signaturekey() const;
  void set_signaturekey(const std::string& value);
  void set_signaturekey(std::string&& value);
  void set_signaturekey(const char* value);
  void set_signaturekey(const void* value, size_t size);
  std::string* mutable_signaturekey();
  std::string* release_signaturekey();
  void set_allocated_signaturekey(std::string* signaturekey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signaturekey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signaturekey(
      std::string* signaturekey);
  private:
  const std::string& _internal_signaturekey() const;
  void _internal_set_signaturekey(const std::string& value);
  std::string* _internal_mutable_signaturekey();
  public:

  // @@protoc_insertion_point(class_scope:api.KeySet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray > verificationkeys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptionkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signaturekey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Certificates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.Certificates) */ {
 public:
  inline Certificates() : Certificates(nullptr) {};
  virtual ~Certificates();

  Certificates(const Certificates& from);
  Certificates(Certificates&& from) noexcept
    : Certificates() {
    *this = ::std::move(from);
  }

  inline Certificates& operator=(const Certificates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Certificates& operator=(Certificates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Certificates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Certificates* internal_default_instance() {
    return reinterpret_cast<const Certificates*>(
               &_Certificates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Certificates& a, Certificates& b) {
    a.Swap(&b);
  }
  inline void Swap(Certificates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Certificates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Certificates* New() const final {
    return CreateMaybeMessage<Certificates>(nullptr);
  }

  Certificates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Certificates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Certificates& from);
  void MergeFrom(const Certificates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Certificates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.Certificates";
  }
  protected:
  explicit Certificates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertFieldNumber = 1,
  };
  // repeated .idpass.Certificate cert = 1;
  int cert_size() const;
  private:
  int _internal_cert_size() const;
  public:
  void clear_cert();
  ::idpass::Certificate* mutable_cert(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >*
      mutable_cert();
  private:
  const ::idpass::Certificate& _internal_cert(int index) const;
  ::idpass::Certificate* _internal_add_cert();
  public:
  const ::idpass::Certificate& cert(int index) const;
  ::idpass::Certificate* add_cert();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >&
      cert() const;

  // @@protoc_insertion_point(class_scope:api.Certificates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate > cert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Ident PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.Ident) */ {
 public:
  inline Ident() : Ident(nullptr) {};
  virtual ~Ident();

  Ident(const Ident& from);
  Ident(Ident&& from) noexcept
    : Ident() {
    *this = ::std::move(from);
  }

  inline Ident& operator=(const Ident& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ident& operator=(Ident&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ident& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ident* internal_default_instance() {
    return reinterpret_cast<const Ident*>(
               &_Ident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Ident& a, Ident& b) {
    a.Swap(&b);
  }
  inline void Swap(Ident* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ident* New() const final {
    return CreateMaybeMessage<Ident>(nullptr);
  }

  Ident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ident>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ident& from);
  void MergeFrom(const Ident& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ident* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.Ident";
  }
  protected:
  explicit Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivExtraFieldNumber = 8,
    kPubExtraFieldNumber = 9,
    kSurNameFieldNumber = 1,
    kGivenNameFieldNumber = 2,
    kPlaceOfBirthFieldNumber = 3,
    kPinFieldNumber = 4,
    kPhotoFieldNumber = 7,
    kUINFieldNumber = 10,
    kFullNameFieldNumber = 11,
    kDateOfBirthFieldNumber = 5,
    kPhotosFieldNumber = 6,
    kPostalAddressFieldNumber = 13,
    kGenderFieldNumber = 12,
  };
  // repeated .idpass.Pair privExtra = 8;
  int privextra_size() const;
  private:
  int _internal_privextra_size() const;
  public:
  void clear_privextra();
  ::idpass::Pair* mutable_privextra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
      mutable_privextra();
  private:
  const ::idpass::Pair& _internal_privextra(int index) const;
  ::idpass::Pair* _internal_add_privextra();
  public:
  const ::idpass::Pair& privextra(int index) const;
  ::idpass::Pair* add_privextra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
      privextra() const;

  // repeated .idpass.Pair pubExtra = 9;
  int pubextra_size() const;
  private:
  int _internal_pubextra_size() const;
  public:
  void clear_pubextra();
  ::idpass::Pair* mutable_pubextra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
      mutable_pubextra();
  private:
  const ::idpass::Pair& _internal_pubextra(int index) const;
  ::idpass::Pair* _internal_add_pubextra();
  public:
  const ::idpass::Pair& pubextra(int index) const;
  ::idpass::Pair* add_pubextra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
      pubextra() const;

  // string surName = 1;
  void clear_surname();
  const std::string& surname() const;
  void set_surname(const std::string& value);
  void set_surname(std::string&& value);
  void set_surname(const char* value);
  void set_surname(const char* value, size_t size);
  std::string* mutable_surname();
  std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_surname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_surname(
      std::string* surname);
  private:
  const std::string& _internal_surname() const;
  void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string givenName = 2;
  void clear_givenname();
  const std::string& givenname() const;
  void set_givenname(const std::string& value);
  void set_givenname(std::string&& value);
  void set_givenname(const char* value);
  void set_givenname(const char* value, size_t size);
  std::string* mutable_givenname();
  std::string* release_givenname();
  void set_allocated_givenname(std::string* givenname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_givenname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_givenname(
      std::string* givenname);
  private:
  const std::string& _internal_givenname() const;
  void _internal_set_givenname(const std::string& value);
  std::string* _internal_mutable_givenname();
  public:

  // string placeOfBirth = 3;
  void clear_placeofbirth();
  const std::string& placeofbirth() const;
  void set_placeofbirth(const std::string& value);
  void set_placeofbirth(std::string&& value);
  void set_placeofbirth(const char* value);
  void set_placeofbirth(const char* value, size_t size);
  std::string* mutable_placeofbirth();
  std::string* release_placeofbirth();
  void set_allocated_placeofbirth(std::string* placeofbirth);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_placeofbirth();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_placeofbirth(
      std::string* placeofbirth);
  private:
  const std::string& _internal_placeofbirth() const;
  void _internal_set_placeofbirth(const std::string& value);
  std::string* _internal_mutable_placeofbirth();
  public:

  // string pin = 4;
  void clear_pin();
  const std::string& pin() const;
  void set_pin(const std::string& value);
  void set_pin(std::string&& value);
  void set_pin(const char* value);
  void set_pin(const char* value, size_t size);
  std::string* mutable_pin();
  std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pin(
      std::string* pin);
  private:
  const std::string& _internal_pin() const;
  void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // bytes photo = 7;
  void clear_photo();
  const std::string& photo() const;
  void set_photo(const std::string& value);
  void set_photo(std::string&& value);
  void set_photo(const char* value);
  void set_photo(const void* value, size_t size);
  std::string* mutable_photo();
  std::string* release_photo();
  void set_allocated_photo(std::string* photo);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_photo();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_photo(
      std::string* photo);
  private:
  const std::string& _internal_photo() const;
  void _internal_set_photo(const std::string& value);
  std::string* _internal_mutable_photo();
  public:

  // string UIN = 10;
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const char* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uin(
      std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // string fullName = 11;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fullname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fullname(
      std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // .idpass.Date dateOfBirth = 5;
  bool has_dateofbirth() const;
  private:
  bool _internal_has_dateofbirth() const;
  public:
  void clear_dateofbirth();
  const ::idpass::Date& dateofbirth() const;
  ::idpass::Date* release_dateofbirth();
  ::idpass::Date* mutable_dateofbirth();
  void set_allocated_dateofbirth(::idpass::Date* dateofbirth);
  private:
  const ::idpass::Date& _internal_dateofbirth() const;
  ::idpass::Date* _internal_mutable_dateofbirth();
  public:
  void unsafe_arena_set_allocated_dateofbirth(
      ::idpass::Date* dateofbirth);
  ::idpass::Date* unsafe_arena_release_dateofbirth();

  // .api.byteArrays photos = 6;
  bool has_photos() const;
  private:
  bool _internal_has_photos() const;
  public:
  void clear_photos();
  const ::api::byteArrays& photos() const;
  ::api::byteArrays* release_photos();
  ::api::byteArrays* mutable_photos();
  void set_allocated_photos(::api::byteArrays* photos);
  private:
  const ::api::byteArrays& _internal_photos() const;
  ::api::byteArrays* _internal_mutable_photos();
  public:
  void unsafe_arena_set_allocated_photos(
      ::api::byteArrays* photos);
  ::api::byteArrays* unsafe_arena_release_photos();

  // .idpass.PostalAddress postalAddress = 13;
  bool has_postaladdress() const;
  private:
  bool _internal_has_postaladdress() const;
  public:
  void clear_postaladdress();
  const ::idpass::PostalAddress& postaladdress() const;
  ::idpass::PostalAddress* release_postaladdress();
  ::idpass::PostalAddress* mutable_postaladdress();
  void set_allocated_postaladdress(::idpass::PostalAddress* postaladdress);
  private:
  const ::idpass::PostalAddress& _internal_postaladdress() const;
  ::idpass::PostalAddress* _internal_mutable_postaladdress();
  public:
  void unsafe_arena_set_allocated_postaladdress(
      ::idpass::PostalAddress* postaladdress);
  ::idpass::PostalAddress* unsafe_arena_release_postaladdress();

  // int32 gender = 12;
  void clear_gender();
  ::PROTOBUF_NAMESPACE_ID::int32 gender() const;
  void set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender() const;
  void _internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:api.Ident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair > privextra_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair > pubextra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr givenname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeofbirth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr photo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::idpass::Date* dateofbirth_;
  ::api::byteArrays* photos_;
  ::idpass::PostalAddress* postaladdress_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Idents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:api.Idents) */ {
 public:
  inline Idents() : Idents(nullptr) {};
  virtual ~Idents();

  Idents(const Idents& from);
  Idents(Idents&& from) noexcept
    : Idents() {
    *this = ::std::move(from);
  }

  inline Idents& operator=(const Idents& from) {
    CopyFrom(from);
    return *this;
  }
  inline Idents& operator=(Idents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Idents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Idents* internal_default_instance() {
    return reinterpret_cast<const Idents*>(
               &_Idents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Idents& a, Idents& b) {
    a.Swap(&b);
  }
  inline void Swap(Idents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Idents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Idents* New() const final {
    return CreateMaybeMessage<Idents>(nullptr);
  }

  Idents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Idents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Idents& from);
  void MergeFrom(const Idents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Idents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "api.Idents";
  }
  protected:
  explicit Idents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentFieldNumber = 1,
  };
  // repeated .api.Ident ident = 1;
  int ident_size() const;
  private:
  int _internal_ident_size() const;
  public:
  void clear_ident();
  ::api::Ident* mutable_ident(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Ident >*
      mutable_ident();
  private:
  const ::api::Ident& _internal_ident(int index) const;
  ::api::Ident* _internal_add_ident();
  public:
  const ::api::Ident& ident(int index) const;
  ::api::Ident* add_ident();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Ident >&
      ident() const;

  // @@protoc_insertion_point(class_scope:api.Idents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Ident > ident_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// byteArray

// .api.byteArray.Typ typ = 1;
inline void byteArray::clear_typ() {
  typ_ = 0;
}
inline ::api::byteArray_Typ byteArray::_internal_typ() const {
  return static_cast< ::api::byteArray_Typ >(typ_);
}
inline ::api::byteArray_Typ byteArray::typ() const {
  // @@protoc_insertion_point(field_get:api.byteArray.typ)
  return _internal_typ();
}
inline void byteArray::_internal_set_typ(::api::byteArray_Typ value) {
  
  typ_ = value;
}
inline void byteArray::set_typ(::api::byteArray_Typ value) {
  _internal_set_typ(value);
  // @@protoc_insertion_point(field_set:api.byteArray.typ)
}

// bytes val = 2;
inline void byteArray::clear_val() {
  val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& byteArray::val() const {
  // @@protoc_insertion_point(field_get:api.byteArray.val)
  return _internal_val();
}
inline void byteArray::set_val(const std::string& value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:api.byteArray.val)
}
inline std::string* byteArray::mutable_val() {
  // @@protoc_insertion_point(field_mutable:api.byteArray.val)
  return _internal_mutable_val();
}
inline const std::string& byteArray::_internal_val() const {
  return val_.Get();
}
inline void byteArray::_internal_set_val(const std::string& value) {
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void byteArray::set_val(std::string&& value) {
  
  val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.byteArray.val)
}
inline void byteArray::set_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.byteArray.val)
}
inline void byteArray::set_val(const void* value,
    size_t size) {
  
  val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.byteArray.val)
}
inline std::string* byteArray::_internal_mutable_val() {
  
  return val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* byteArray::release_val() {
  // @@protoc_insertion_point(field_release:api.byteArray.val)
  return val_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void byteArray::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.byteArray.val)
}
inline std::string* byteArray::unsafe_arena_release_val() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.byteArray.val)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return val_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void byteArray::unsafe_arena_set_allocated_val(
    std::string* val) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (val != nullptr) {
    
  } else {
    
  }
  val_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      val, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.byteArray.val)
}

// -------------------------------------------------------------------

// byteArrays

// repeated .api.byteArray vals = 1;
inline int byteArrays::_internal_vals_size() const {
  return vals_.size();
}
inline int byteArrays::vals_size() const {
  return _internal_vals_size();
}
inline void byteArrays::clear_vals() {
  vals_.Clear();
}
inline ::api::byteArray* byteArrays::mutable_vals(int index) {
  // @@protoc_insertion_point(field_mutable:api.byteArrays.vals)
  return vals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >*
byteArrays::mutable_vals() {
  // @@protoc_insertion_point(field_mutable_list:api.byteArrays.vals)
  return &vals_;
}
inline const ::api::byteArray& byteArrays::_internal_vals(int index) const {
  return vals_.Get(index);
}
inline const ::api::byteArray& byteArrays::vals(int index) const {
  // @@protoc_insertion_point(field_get:api.byteArrays.vals)
  return _internal_vals(index);
}
inline ::api::byteArray* byteArrays::_internal_add_vals() {
  return vals_.Add();
}
inline ::api::byteArray* byteArrays::add_vals() {
  // @@protoc_insertion_point(field_add:api.byteArrays.vals)
  return _internal_add_vals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >&
byteArrays::vals() const {
  // @@protoc_insertion_point(field_list:api.byteArrays.vals)
  return vals_;
}

// -------------------------------------------------------------------

// KeySet

// bytes encryptionKey = 1;
inline void KeySet::clear_encryptionkey() {
  encryptionkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeySet::encryptionkey() const {
  // @@protoc_insertion_point(field_get:api.KeySet.encryptionKey)
  return _internal_encryptionkey();
}
inline void KeySet::set_encryptionkey(const std::string& value) {
  _internal_set_encryptionkey(value);
  // @@protoc_insertion_point(field_set:api.KeySet.encryptionKey)
}
inline std::string* KeySet::mutable_encryptionkey() {
  // @@protoc_insertion_point(field_mutable:api.KeySet.encryptionKey)
  return _internal_mutable_encryptionkey();
}
inline const std::string& KeySet::_internal_encryptionkey() const {
  return encryptionkey_.Get();
}
inline void KeySet::_internal_set_encryptionkey(const std::string& value) {
  
  encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeySet::set_encryptionkey(std::string&& value) {
  
  encryptionkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.KeySet.encryptionKey)
}
inline void KeySet::set_encryptionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.KeySet.encryptionKey)
}
inline void KeySet::set_encryptionkey(const void* value,
    size_t size) {
  
  encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.KeySet.encryptionKey)
}
inline std::string* KeySet::_internal_mutable_encryptionkey() {
  
  return encryptionkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeySet::release_encryptionkey() {
  // @@protoc_insertion_point(field_release:api.KeySet.encryptionKey)
  return encryptionkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeySet::set_allocated_encryptionkey(std::string* encryptionkey) {
  if (encryptionkey != nullptr) {
    
  } else {
    
  }
  encryptionkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryptionkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.KeySet.encryptionKey)
}
inline std::string* KeySet::unsafe_arena_release_encryptionkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.KeySet.encryptionKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encryptionkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeySet::unsafe_arena_set_allocated_encryptionkey(
    std::string* encryptionkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encryptionkey != nullptr) {
    
  } else {
    
  }
  encryptionkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encryptionkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.KeySet.encryptionKey)
}

// bytes signatureKey = 2;
inline void KeySet::clear_signaturekey() {
  signaturekey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeySet::signaturekey() const {
  // @@protoc_insertion_point(field_get:api.KeySet.signatureKey)
  return _internal_signaturekey();
}
inline void KeySet::set_signaturekey(const std::string& value) {
  _internal_set_signaturekey(value);
  // @@protoc_insertion_point(field_set:api.KeySet.signatureKey)
}
inline std::string* KeySet::mutable_signaturekey() {
  // @@protoc_insertion_point(field_mutable:api.KeySet.signatureKey)
  return _internal_mutable_signaturekey();
}
inline const std::string& KeySet::_internal_signaturekey() const {
  return signaturekey_.Get();
}
inline void KeySet::_internal_set_signaturekey(const std::string& value) {
  
  signaturekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeySet::set_signaturekey(std::string&& value) {
  
  signaturekey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.KeySet.signatureKey)
}
inline void KeySet::set_signaturekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signaturekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.KeySet.signatureKey)
}
inline void KeySet::set_signaturekey(const void* value,
    size_t size) {
  
  signaturekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.KeySet.signatureKey)
}
inline std::string* KeySet::_internal_mutable_signaturekey() {
  
  return signaturekey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeySet::release_signaturekey() {
  // @@protoc_insertion_point(field_release:api.KeySet.signatureKey)
  return signaturekey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeySet::set_allocated_signaturekey(std::string* signaturekey) {
  if (signaturekey != nullptr) {
    
  } else {
    
  }
  signaturekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signaturekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.KeySet.signatureKey)
}
inline std::string* KeySet::unsafe_arena_release_signaturekey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.KeySet.signatureKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signaturekey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KeySet::unsafe_arena_set_allocated_signaturekey(
    std::string* signaturekey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signaturekey != nullptr) {
    
  } else {
    
  }
  signaturekey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signaturekey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.KeySet.signatureKey)
}

// repeated .api.byteArray verificationKeys = 3;
inline int KeySet::_internal_verificationkeys_size() const {
  return verificationkeys_.size();
}
inline int KeySet::verificationkeys_size() const {
  return _internal_verificationkeys_size();
}
inline void KeySet::clear_verificationkeys() {
  verificationkeys_.Clear();
}
inline ::api::byteArray* KeySet::mutable_verificationkeys(int index) {
  // @@protoc_insertion_point(field_mutable:api.KeySet.verificationKeys)
  return verificationkeys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >*
KeySet::mutable_verificationkeys() {
  // @@protoc_insertion_point(field_mutable_list:api.KeySet.verificationKeys)
  return &verificationkeys_;
}
inline const ::api::byteArray& KeySet::_internal_verificationkeys(int index) const {
  return verificationkeys_.Get(index);
}
inline const ::api::byteArray& KeySet::verificationkeys(int index) const {
  // @@protoc_insertion_point(field_get:api.KeySet.verificationKeys)
  return _internal_verificationkeys(index);
}
inline ::api::byteArray* KeySet::_internal_add_verificationkeys() {
  return verificationkeys_.Add();
}
inline ::api::byteArray* KeySet::add_verificationkeys() {
  // @@protoc_insertion_point(field_add:api.KeySet.verificationKeys)
  return _internal_add_verificationkeys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::byteArray >&
KeySet::verificationkeys() const {
  // @@protoc_insertion_point(field_list:api.KeySet.verificationKeys)
  return verificationkeys_;
}

// -------------------------------------------------------------------

// Certificates

// repeated .idpass.Certificate cert = 1;
inline int Certificates::_internal_cert_size() const {
  return cert_.size();
}
inline int Certificates::cert_size() const {
  return _internal_cert_size();
}
inline ::idpass::Certificate* Certificates::mutable_cert(int index) {
  // @@protoc_insertion_point(field_mutable:api.Certificates.cert)
  return cert_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >*
Certificates::mutable_cert() {
  // @@protoc_insertion_point(field_mutable_list:api.Certificates.cert)
  return &cert_;
}
inline const ::idpass::Certificate& Certificates::_internal_cert(int index) const {
  return cert_.Get(index);
}
inline const ::idpass::Certificate& Certificates::cert(int index) const {
  // @@protoc_insertion_point(field_get:api.Certificates.cert)
  return _internal_cert(index);
}
inline ::idpass::Certificate* Certificates::_internal_add_cert() {
  return cert_.Add();
}
inline ::idpass::Certificate* Certificates::add_cert() {
  // @@protoc_insertion_point(field_add:api.Certificates.cert)
  return _internal_add_cert();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >&
Certificates::cert() const {
  // @@protoc_insertion_point(field_list:api.Certificates.cert)
  return cert_;
}

// -------------------------------------------------------------------

// Ident

// string surName = 1;
inline void Ident::clear_surname() {
  surname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::surname() const {
  // @@protoc_insertion_point(field_get:api.Ident.surName)
  return _internal_surname();
}
inline void Ident::set_surname(const std::string& value) {
  _internal_set_surname(value);
  // @@protoc_insertion_point(field_set:api.Ident.surName)
}
inline std::string* Ident::mutable_surname() {
  // @@protoc_insertion_point(field_mutable:api.Ident.surName)
  return _internal_mutable_surname();
}
inline const std::string& Ident::_internal_surname() const {
  return surname_.Get();
}
inline void Ident::_internal_set_surname(const std::string& value) {
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_surname(std::string&& value) {
  
  surname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.surName)
}
inline void Ident::set_surname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.surName)
}
inline void Ident::set_surname(const char* value,
    size_t size) {
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.surName)
}
inline std::string* Ident::_internal_mutable_surname() {
  
  return surname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_surname() {
  // @@protoc_insertion_point(field_release:api.Ident.surName)
  return surname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.surName)
}
inline std::string* Ident::unsafe_arena_release_surname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.surName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return surname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_surname(
    std::string* surname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      surname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.surName)
}

// string givenName = 2;
inline void Ident::clear_givenname() {
  givenname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::givenname() const {
  // @@protoc_insertion_point(field_get:api.Ident.givenName)
  return _internal_givenname();
}
inline void Ident::set_givenname(const std::string& value) {
  _internal_set_givenname(value);
  // @@protoc_insertion_point(field_set:api.Ident.givenName)
}
inline std::string* Ident::mutable_givenname() {
  // @@protoc_insertion_point(field_mutable:api.Ident.givenName)
  return _internal_mutable_givenname();
}
inline const std::string& Ident::_internal_givenname() const {
  return givenname_.Get();
}
inline void Ident::_internal_set_givenname(const std::string& value) {
  
  givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_givenname(std::string&& value) {
  
  givenname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.givenName)
}
inline void Ident::set_givenname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.givenName)
}
inline void Ident::set_givenname(const char* value,
    size_t size) {
  
  givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.givenName)
}
inline std::string* Ident::_internal_mutable_givenname() {
  
  return givenname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_givenname() {
  // @@protoc_insertion_point(field_release:api.Ident.givenName)
  return givenname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_givenname(std::string* givenname) {
  if (givenname != nullptr) {
    
  } else {
    
  }
  givenname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), givenname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.givenName)
}
inline std::string* Ident::unsafe_arena_release_givenname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.givenName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return givenname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_givenname(
    std::string* givenname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (givenname != nullptr) {
    
  } else {
    
  }
  givenname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      givenname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.givenName)
}

// string placeOfBirth = 3;
inline void Ident::clear_placeofbirth() {
  placeofbirth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::placeofbirth() const {
  // @@protoc_insertion_point(field_get:api.Ident.placeOfBirth)
  return _internal_placeofbirth();
}
inline void Ident::set_placeofbirth(const std::string& value) {
  _internal_set_placeofbirth(value);
  // @@protoc_insertion_point(field_set:api.Ident.placeOfBirth)
}
inline std::string* Ident::mutable_placeofbirth() {
  // @@protoc_insertion_point(field_mutable:api.Ident.placeOfBirth)
  return _internal_mutable_placeofbirth();
}
inline const std::string& Ident::_internal_placeofbirth() const {
  return placeofbirth_.Get();
}
inline void Ident::_internal_set_placeofbirth(const std::string& value) {
  
  placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_placeofbirth(std::string&& value) {
  
  placeofbirth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.placeOfBirth)
}
inline void Ident::set_placeofbirth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.placeOfBirth)
}
inline void Ident::set_placeofbirth(const char* value,
    size_t size) {
  
  placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.placeOfBirth)
}
inline std::string* Ident::_internal_mutable_placeofbirth() {
  
  return placeofbirth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_placeofbirth() {
  // @@protoc_insertion_point(field_release:api.Ident.placeOfBirth)
  return placeofbirth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_placeofbirth(std::string* placeofbirth) {
  if (placeofbirth != nullptr) {
    
  } else {
    
  }
  placeofbirth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeofbirth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.placeOfBirth)
}
inline std::string* Ident::unsafe_arena_release_placeofbirth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.placeOfBirth)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return placeofbirth_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_placeofbirth(
    std::string* placeofbirth) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (placeofbirth != nullptr) {
    
  } else {
    
  }
  placeofbirth_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      placeofbirth, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.placeOfBirth)
}

// string pin = 4;
inline void Ident::clear_pin() {
  pin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::pin() const {
  // @@protoc_insertion_point(field_get:api.Ident.pin)
  return _internal_pin();
}
inline void Ident::set_pin(const std::string& value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:api.Ident.pin)
}
inline std::string* Ident::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:api.Ident.pin)
  return _internal_mutable_pin();
}
inline const std::string& Ident::_internal_pin() const {
  return pin_.Get();
}
inline void Ident::_internal_set_pin(const std::string& value) {
  
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_pin(std::string&& value) {
  
  pin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.pin)
}
inline void Ident::set_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.pin)
}
inline void Ident::set_pin(const char* value,
    size_t size) {
  
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.pin)
}
inline std::string* Ident::_internal_mutable_pin() {
  
  return pin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_pin() {
  // @@protoc_insertion_point(field_release:api.Ident.pin)
  return pin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.pin)
}
inline std::string* Ident::unsafe_arena_release_pin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.pin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_pin(
    std::string* pin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.pin)
}

// .idpass.Date dateOfBirth = 5;
inline bool Ident::_internal_has_dateofbirth() const {
  return this != internal_default_instance() && dateofbirth_ != nullptr;
}
inline bool Ident::has_dateofbirth() const {
  return _internal_has_dateofbirth();
}
inline const ::idpass::Date& Ident::_internal_dateofbirth() const {
  const ::idpass::Date* p = dateofbirth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::Date*>(
      &::idpass::_Date_default_instance_);
}
inline const ::idpass::Date& Ident::dateofbirth() const {
  // @@protoc_insertion_point(field_get:api.Ident.dateOfBirth)
  return _internal_dateofbirth();
}
inline void Ident::unsafe_arena_set_allocated_dateofbirth(
    ::idpass::Date* dateofbirth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dateofbirth_);
  }
  dateofbirth_ = dateofbirth;
  if (dateofbirth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.dateOfBirth)
}
inline ::idpass::Date* Ident::release_dateofbirth() {
  auto temp = unsafe_arena_release_dateofbirth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::Date* Ident::unsafe_arena_release_dateofbirth() {
  // @@protoc_insertion_point(field_release:api.Ident.dateOfBirth)
  
  ::idpass::Date* temp = dateofbirth_;
  dateofbirth_ = nullptr;
  return temp;
}
inline ::idpass::Date* Ident::_internal_mutable_dateofbirth() {
  
  if (dateofbirth_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::Date>(GetArena());
    dateofbirth_ = p;
  }
  return dateofbirth_;
}
inline ::idpass::Date* Ident::mutable_dateofbirth() {
  // @@protoc_insertion_point(field_mutable:api.Ident.dateOfBirth)
  return _internal_mutable_dateofbirth();
}
inline void Ident::set_allocated_dateofbirth(::idpass::Date* dateofbirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dateofbirth_);
  }
  if (dateofbirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dateofbirth)->GetArena();
    if (message_arena != submessage_arena) {
      dateofbirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dateofbirth, submessage_arena);
    }
    
  } else {
    
  }
  dateofbirth_ = dateofbirth;
  // @@protoc_insertion_point(field_set_allocated:api.Ident.dateOfBirth)
}

// .api.byteArrays photos = 6;
inline bool Ident::_internal_has_photos() const {
  return this != internal_default_instance() && photos_ != nullptr;
}
inline bool Ident::has_photos() const {
  return _internal_has_photos();
}
inline void Ident::clear_photos() {
  if (GetArena() == nullptr && photos_ != nullptr) {
    delete photos_;
  }
  photos_ = nullptr;
}
inline const ::api::byteArrays& Ident::_internal_photos() const {
  const ::api::byteArrays* p = photos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::api::byteArrays*>(
      &::api::_byteArrays_default_instance_);
}
inline const ::api::byteArrays& Ident::photos() const {
  // @@protoc_insertion_point(field_get:api.Ident.photos)
  return _internal_photos();
}
inline void Ident::unsafe_arena_set_allocated_photos(
    ::api::byteArrays* photos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(photos_);
  }
  photos_ = photos;
  if (photos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.photos)
}
inline ::api::byteArrays* Ident::release_photos() {
  auto temp = unsafe_arena_release_photos();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::api::byteArrays* Ident::unsafe_arena_release_photos() {
  // @@protoc_insertion_point(field_release:api.Ident.photos)
  
  ::api::byteArrays* temp = photos_;
  photos_ = nullptr;
  return temp;
}
inline ::api::byteArrays* Ident::_internal_mutable_photos() {
  
  if (photos_ == nullptr) {
    auto* p = CreateMaybeMessage<::api::byteArrays>(GetArena());
    photos_ = p;
  }
  return photos_;
}
inline ::api::byteArrays* Ident::mutable_photos() {
  // @@protoc_insertion_point(field_mutable:api.Ident.photos)
  return _internal_mutable_photos();
}
inline void Ident::set_allocated_photos(::api::byteArrays* photos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete photos_;
  }
  if (photos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(photos);
    if (message_arena != submessage_arena) {
      photos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, photos, submessage_arena);
    }
    
  } else {
    
  }
  photos_ = photos;
  // @@protoc_insertion_point(field_set_allocated:api.Ident.photos)
}

// bytes photo = 7;
inline void Ident::clear_photo() {
  photo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::photo() const {
  // @@protoc_insertion_point(field_get:api.Ident.photo)
  return _internal_photo();
}
inline void Ident::set_photo(const std::string& value) {
  _internal_set_photo(value);
  // @@protoc_insertion_point(field_set:api.Ident.photo)
}
inline std::string* Ident::mutable_photo() {
  // @@protoc_insertion_point(field_mutable:api.Ident.photo)
  return _internal_mutable_photo();
}
inline const std::string& Ident::_internal_photo() const {
  return photo_.Get();
}
inline void Ident::_internal_set_photo(const std::string& value) {
  
  photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_photo(std::string&& value) {
  
  photo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.photo)
}
inline void Ident::set_photo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.photo)
}
inline void Ident::set_photo(const void* value,
    size_t size) {
  
  photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.photo)
}
inline std::string* Ident::_internal_mutable_photo() {
  
  return photo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_photo() {
  // @@protoc_insertion_point(field_release:api.Ident.photo)
  return photo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_photo(std::string* photo) {
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), photo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.photo)
}
inline std::string* Ident::unsafe_arena_release_photo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.photo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return photo_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_photo(
    std::string* photo) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (photo != nullptr) {
    
  } else {
    
  }
  photo_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      photo, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.photo)
}

// repeated .idpass.Pair privExtra = 8;
inline int Ident::_internal_privextra_size() const {
  return privextra_.size();
}
inline int Ident::privextra_size() const {
  return _internal_privextra_size();
}
inline ::idpass::Pair* Ident::mutable_privextra(int index) {
  // @@protoc_insertion_point(field_mutable:api.Ident.privExtra)
  return privextra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
Ident::mutable_privextra() {
  // @@protoc_insertion_point(field_mutable_list:api.Ident.privExtra)
  return &privextra_;
}
inline const ::idpass::Pair& Ident::_internal_privextra(int index) const {
  return privextra_.Get(index);
}
inline const ::idpass::Pair& Ident::privextra(int index) const {
  // @@protoc_insertion_point(field_get:api.Ident.privExtra)
  return _internal_privextra(index);
}
inline ::idpass::Pair* Ident::_internal_add_privextra() {
  return privextra_.Add();
}
inline ::idpass::Pair* Ident::add_privextra() {
  // @@protoc_insertion_point(field_add:api.Ident.privExtra)
  return _internal_add_privextra();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
Ident::privextra() const {
  // @@protoc_insertion_point(field_list:api.Ident.privExtra)
  return privextra_;
}

// repeated .idpass.Pair pubExtra = 9;
inline int Ident::_internal_pubextra_size() const {
  return pubextra_.size();
}
inline int Ident::pubextra_size() const {
  return _internal_pubextra_size();
}
inline ::idpass::Pair* Ident::mutable_pubextra(int index) {
  // @@protoc_insertion_point(field_mutable:api.Ident.pubExtra)
  return pubextra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
Ident::mutable_pubextra() {
  // @@protoc_insertion_point(field_mutable_list:api.Ident.pubExtra)
  return &pubextra_;
}
inline const ::idpass::Pair& Ident::_internal_pubextra(int index) const {
  return pubextra_.Get(index);
}
inline const ::idpass::Pair& Ident::pubextra(int index) const {
  // @@protoc_insertion_point(field_get:api.Ident.pubExtra)
  return _internal_pubextra(index);
}
inline ::idpass::Pair* Ident::_internal_add_pubextra() {
  return pubextra_.Add();
}
inline ::idpass::Pair* Ident::add_pubextra() {
  // @@protoc_insertion_point(field_add:api.Ident.pubExtra)
  return _internal_add_pubextra();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
Ident::pubextra() const {
  // @@protoc_insertion_point(field_list:api.Ident.pubExtra)
  return pubextra_;
}

// string UIN = 10;
inline void Ident::clear_uin() {
  uin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::uin() const {
  // @@protoc_insertion_point(field_get:api.Ident.UIN)
  return _internal_uin();
}
inline void Ident::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:api.Ident.UIN)
}
inline std::string* Ident::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:api.Ident.UIN)
  return _internal_mutable_uin();
}
inline const std::string& Ident::_internal_uin() const {
  return uin_.Get();
}
inline void Ident::_internal_set_uin(const std::string& value) {
  
  uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_uin(std::string&& value) {
  
  uin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.UIN)
}
inline void Ident::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.UIN)
}
inline void Ident::set_uin(const char* value,
    size_t size) {
  
  uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.UIN)
}
inline std::string* Ident::_internal_mutable_uin() {
  
  return uin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_uin() {
  // @@protoc_insertion_point(field_release:api.Ident.UIN)
  return uin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    
  } else {
    
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.UIN)
}
inline std::string* Ident::unsafe_arena_release_uin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.UIN)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_uin(
    std::string* uin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uin != nullptr) {
    
  } else {
    
  }
  uin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.UIN)
}

// string fullName = 11;
inline void Ident::clear_fullname() {
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ident::fullname() const {
  // @@protoc_insertion_point(field_get:api.Ident.fullName)
  return _internal_fullname();
}
inline void Ident::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:api.Ident.fullName)
}
inline std::string* Ident::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:api.Ident.fullName)
  return _internal_mutable_fullname();
}
inline const std::string& Ident::_internal_fullname() const {
  return fullname_.Get();
}
inline void Ident::_internal_set_fullname(const std::string& value) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ident::set_fullname(std::string&& value) {
  
  fullname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:api.Ident.fullName)
}
inline void Ident::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:api.Ident.fullName)
}
inline void Ident::set_fullname(const char* value,
    size_t size) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:api.Ident.fullName)
}
inline std::string* Ident::_internal_mutable_fullname() {
  
  return fullname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ident::release_fullname() {
  // @@protoc_insertion_point(field_release:api.Ident.fullName)
  return fullname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ident::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:api.Ident.fullName)
}
inline std::string* Ident::unsafe_arena_release_fullname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:api.Ident.fullName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fullname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ident::unsafe_arena_set_allocated_fullname(
    std::string* fullname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fullname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.fullName)
}

// int32 gender = 12;
inline void Ident::clear_gender() {
  gender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ident::_internal_gender() const {
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Ident::gender() const {
  // @@protoc_insertion_point(field_get:api.Ident.gender)
  return _internal_gender();
}
inline void Ident::_internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_ = value;
}
inline void Ident::set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:api.Ident.gender)
}

// .idpass.PostalAddress postalAddress = 13;
inline bool Ident::_internal_has_postaladdress() const {
  return this != internal_default_instance() && postaladdress_ != nullptr;
}
inline bool Ident::has_postaladdress() const {
  return _internal_has_postaladdress();
}
inline const ::idpass::PostalAddress& Ident::_internal_postaladdress() const {
  const ::idpass::PostalAddress* p = postaladdress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::PostalAddress*>(
      &::idpass::_PostalAddress_default_instance_);
}
inline const ::idpass::PostalAddress& Ident::postaladdress() const {
  // @@protoc_insertion_point(field_get:api.Ident.postalAddress)
  return _internal_postaladdress();
}
inline void Ident::unsafe_arena_set_allocated_postaladdress(
    ::idpass::PostalAddress* postaladdress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postaladdress_);
  }
  postaladdress_ = postaladdress;
  if (postaladdress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:api.Ident.postalAddress)
}
inline ::idpass::PostalAddress* Ident::release_postaladdress() {
  auto temp = unsafe_arena_release_postaladdress();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::PostalAddress* Ident::unsafe_arena_release_postaladdress() {
  // @@protoc_insertion_point(field_release:api.Ident.postalAddress)
  
  ::idpass::PostalAddress* temp = postaladdress_;
  postaladdress_ = nullptr;
  return temp;
}
inline ::idpass::PostalAddress* Ident::_internal_mutable_postaladdress() {
  
  if (postaladdress_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::PostalAddress>(GetArena());
    postaladdress_ = p;
  }
  return postaladdress_;
}
inline ::idpass::PostalAddress* Ident::mutable_postaladdress() {
  // @@protoc_insertion_point(field_mutable:api.Ident.postalAddress)
  return _internal_mutable_postaladdress();
}
inline void Ident::set_allocated_postaladdress(::idpass::PostalAddress* postaladdress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(postaladdress_);
  }
  if (postaladdress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postaladdress)->GetArena();
    if (message_arena != submessage_arena) {
      postaladdress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postaladdress, submessage_arena);
    }
    
  } else {
    
  }
  postaladdress_ = postaladdress;
  // @@protoc_insertion_point(field_set_allocated:api.Ident.postalAddress)
}

// -------------------------------------------------------------------

// Idents

// repeated .api.Ident ident = 1;
inline int Idents::_internal_ident_size() const {
  return ident_.size();
}
inline int Idents::ident_size() const {
  return _internal_ident_size();
}
inline void Idents::clear_ident() {
  ident_.Clear();
}
inline ::api::Ident* Idents::mutable_ident(int index) {
  // @@protoc_insertion_point(field_mutable:api.Idents.ident)
  return ident_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Ident >*
Idents::mutable_ident() {
  // @@protoc_insertion_point(field_mutable_list:api.Idents.ident)
  return &ident_;
}
inline const ::api::Ident& Idents::_internal_ident(int index) const {
  return ident_.Get(index);
}
inline const ::api::Ident& Idents::ident(int index) const {
  // @@protoc_insertion_point(field_get:api.Idents.ident)
  return _internal_ident(index);
}
inline ::api::Ident* Idents::_internal_add_ident() {
  return ident_.Add();
}
inline ::api::Ident* Idents::add_ident() {
  // @@protoc_insertion_point(field_add:api.Idents.ident)
  return _internal_add_ident();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::api::Ident >&
Idents::ident() const {
  // @@protoc_insertion_point(field_list:api.Idents.ident)
  return ident_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::api::byteArray_Typ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::api::byteArray_Typ>() {
  return ::api::byteArray_Typ_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
