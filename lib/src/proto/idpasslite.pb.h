// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idpasslite.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_idpasslite_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_idpasslite_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_idpasslite_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idpasslite_2eproto;
namespace idpass {
class CardAccess;
class CardAccessDefaultTypeInternal;
extern CardAccessDefaultTypeInternal _CardAccess_default_instance_;
class CardDetails;
class CardDetailsDefaultTypeInternal;
extern CardDetailsDefaultTypeInternal _CardDetails_default_instance_;
class Certificate;
class CertificateDefaultTypeInternal;
extern CertificateDefaultTypeInternal _Certificate_default_instance_;
class Date;
class DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class Dictionary;
class DictionaryDefaultTypeInternal;
extern DictionaryDefaultTypeInternal _Dictionary_default_instance_;
class IDPassCard;
class IDPassCardDefaultTypeInternal;
extern IDPassCardDefaultTypeInternal _IDPassCard_default_instance_;
class IDPassCards;
class IDPassCardsDefaultTypeInternal;
extern IDPassCardsDefaultTypeInternal _IDPassCards_default_instance_;
class Pair;
class PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
class PostalAddress;
class PostalAddressDefaultTypeInternal;
extern PostalAddressDefaultTypeInternal _PostalAddress_default_instance_;
class PublicSignedIDPassCard;
class PublicSignedIDPassCardDefaultTypeInternal;
extern PublicSignedIDPassCardDefaultTypeInternal _PublicSignedIDPassCard_default_instance_;
class SignedIDPassCard;
class SignedIDPassCardDefaultTypeInternal;
extern SignedIDPassCardDefaultTypeInternal _SignedIDPassCard_default_instance_;
}  // namespace idpass
PROTOBUF_NAMESPACE_OPEN
template<> ::idpass::CardAccess* Arena::CreateMaybeMessage<::idpass::CardAccess>(Arena*);
template<> ::idpass::CardDetails* Arena::CreateMaybeMessage<::idpass::CardDetails>(Arena*);
template<> ::idpass::Certificate* Arena::CreateMaybeMessage<::idpass::Certificate>(Arena*);
template<> ::idpass::Date* Arena::CreateMaybeMessage<::idpass::Date>(Arena*);
template<> ::idpass::Dictionary* Arena::CreateMaybeMessage<::idpass::Dictionary>(Arena*);
template<> ::idpass::IDPassCard* Arena::CreateMaybeMessage<::idpass::IDPassCard>(Arena*);
template<> ::idpass::IDPassCards* Arena::CreateMaybeMessage<::idpass::IDPassCards>(Arena*);
template<> ::idpass::Pair* Arena::CreateMaybeMessage<::idpass::Pair>(Arena*);
template<> ::idpass::PostalAddress* Arena::CreateMaybeMessage<::idpass::PostalAddress>(Arena*);
template<> ::idpass::PublicSignedIDPassCard* Arena::CreateMaybeMessage<::idpass::PublicSignedIDPassCard>(Arena*);
template<> ::idpass::SignedIDPassCard* Arena::CreateMaybeMessage<::idpass::SignedIDPassCard>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace idpass {

enum CardAccess_FingerType : int {
  CardAccess_FingerType_R1 = 0,
  CardAccess_FingerType_R2 = 1,
  CardAccess_FingerType_R3 = 2,
  CardAccess_FingerType_R4 = 3,
  CardAccess_FingerType_R5 = 4,
  CardAccess_FingerType_L1 = 5,
  CardAccess_FingerType_L2 = 6,
  CardAccess_FingerType_L3 = 7,
  CardAccess_FingerType_L4 = 8,
  CardAccess_FingerType_L5 = 9,
  CardAccess_FingerType_CardAccess_FingerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CardAccess_FingerType_CardAccess_FingerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CardAccess_FingerType_IsValid(int value);
constexpr CardAccess_FingerType CardAccess_FingerType_FingerType_MIN = CardAccess_FingerType_R1;
constexpr CardAccess_FingerType CardAccess_FingerType_FingerType_MAX = CardAccess_FingerType_L5;
constexpr int CardAccess_FingerType_FingerType_ARRAYSIZE = CardAccess_FingerType_FingerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CardAccess_FingerType_descriptor();
template<typename T>
inline const std::string& CardAccess_FingerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CardAccess_FingerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CardAccess_FingerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CardAccess_FingerType_descriptor(), enum_t_value);
}
inline bool CardAccess_FingerType_Parse(
    const std::string& name, CardAccess_FingerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CardAccess_FingerType>(
    CardAccess_FingerType_descriptor(), name, value);
}
enum CardAccess_EyeType : int {
  CardAccess_EyeType_R = 0,
  CardAccess_EyeType_L = 1,
  CardAccess_EyeType_CardAccess_EyeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CardAccess_EyeType_CardAccess_EyeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CardAccess_EyeType_IsValid(int value);
constexpr CardAccess_EyeType CardAccess_EyeType_EyeType_MIN = CardAccess_EyeType_R;
constexpr CardAccess_EyeType CardAccess_EyeType_EyeType_MAX = CardAccess_EyeType_L;
constexpr int CardAccess_EyeType_EyeType_ARRAYSIZE = CardAccess_EyeType_EyeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CardAccess_EyeType_descriptor();
template<typename T>
inline const std::string& CardAccess_EyeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CardAccess_EyeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CardAccess_EyeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CardAccess_EyeType_descriptor(), enum_t_value);
}
inline bool CardAccess_EyeType_Parse(
    const std::string& name, CardAccess_EyeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CardAccess_EyeType>(
    CardAccess_EyeType_descriptor(), name, value);
}
// ===================================================================

class Date PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.Date) */ {
 public:
  inline Date() : Date(nullptr) {};
  virtual ~Date();

  Date(const Date& from);
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  inline Date& operator=(Date&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Date& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }
  inline void Swap(Date* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Date* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Date* New() const final {
    return CreateMaybeMessage<Date>(nullptr);
  }

  Date* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.Date";
  }
  protected:
  explicit Date(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
  };
  // int32 year = 1;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 month = 2;
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:idpass.Date)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class Pair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.Pair) */ {
 public:
  inline Pair() : Pair(nullptr) {};
  virtual ~Pair();

  Pair(const Pair& from);
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pair& operator=(Pair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }
  inline void Swap(Pair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pair* New() const final {
    return CreateMaybeMessage<Pair>(nullptr);
  }

  Pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.Pair";
  }
  protected:
  explicit Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:idpass.Pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class Dictionary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.Dictionary) */ {
 public:
  inline Dictionary() : Dictionary(nullptr) {};
  virtual ~Dictionary();

  Dictionary(const Dictionary& from);
  Dictionary(Dictionary&& from) noexcept
    : Dictionary() {
    *this = ::std::move(from);
  }

  inline Dictionary& operator=(const Dictionary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dictionary& operator=(Dictionary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dictionary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dictionary* internal_default_instance() {
    return reinterpret_cast<const Dictionary*>(
               &_Dictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dictionary& a, Dictionary& b) {
    a.Swap(&b);
  }
  inline void Swap(Dictionary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dictionary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dictionary* New() const final {
    return CreateMaybeMessage<Dictionary>(nullptr);
  }

  Dictionary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dictionary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dictionary& from);
  void MergeFrom(const Dictionary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dictionary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.Dictionary";
  }
  protected:
  explicit Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 1,
  };
  // repeated .idpass.Pair pairs = 1;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::idpass::Pair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
      mutable_pairs();
  private:
  const ::idpass::Pair& _internal_pairs(int index) const;
  ::idpass::Pair* _internal_add_pairs();
  public:
  const ::idpass::Pair& pairs(int index) const;
  ::idpass::Pair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
      pairs() const;

  // @@protoc_insertion_point(class_scope:idpass.Dictionary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair > pairs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class CardAccess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.CardAccess) */ {
 public:
  inline CardAccess() : CardAccess(nullptr) {};
  virtual ~CardAccess();

  CardAccess(const CardAccess& from);
  CardAccess(CardAccess&& from) noexcept
    : CardAccess() {
    *this = ::std::move(from);
  }

  inline CardAccess& operator=(const CardAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardAccess& operator=(CardAccess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardAccess* internal_default_instance() {
    return reinterpret_cast<const CardAccess*>(
               &_CardAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CardAccess& a, CardAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(CardAccess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardAccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardAccess* New() const final {
    return CreateMaybeMessage<CardAccess>(nullptr);
  }

  CardAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardAccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardAccess& from);
  void MergeFrom(const CardAccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardAccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.CardAccess";
  }
  protected:
  explicit CardAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CardAccess_FingerType FingerType;
  static constexpr FingerType R1 =
    CardAccess_FingerType_R1;
  static constexpr FingerType R2 =
    CardAccess_FingerType_R2;
  static constexpr FingerType R3 =
    CardAccess_FingerType_R3;
  static constexpr FingerType R4 =
    CardAccess_FingerType_R4;
  static constexpr FingerType R5 =
    CardAccess_FingerType_R5;
  static constexpr FingerType L1 =
    CardAccess_FingerType_L1;
  static constexpr FingerType L2 =
    CardAccess_FingerType_L2;
  static constexpr FingerType L3 =
    CardAccess_FingerType_L3;
  static constexpr FingerType L4 =
    CardAccess_FingerType_L4;
  static constexpr FingerType L5 =
    CardAccess_FingerType_L5;
  static inline bool FingerType_IsValid(int value) {
    return CardAccess_FingerType_IsValid(value);
  }
  static constexpr FingerType FingerType_MIN =
    CardAccess_FingerType_FingerType_MIN;
  static constexpr FingerType FingerType_MAX =
    CardAccess_FingerType_FingerType_MAX;
  static constexpr int FingerType_ARRAYSIZE =
    CardAccess_FingerType_FingerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FingerType_descriptor() {
    return CardAccess_FingerType_descriptor();
  }
  template<typename T>
  static inline const std::string& FingerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FingerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FingerType_Name.");
    return CardAccess_FingerType_Name(enum_t_value);
  }
  static inline bool FingerType_Parse(const std::string& name,
      FingerType* value) {
    return CardAccess_FingerType_Parse(name, value);
  }

  typedef CardAccess_EyeType EyeType;
  static constexpr EyeType R =
    CardAccess_EyeType_R;
  static constexpr EyeType L =
    CardAccess_EyeType_L;
  static inline bool EyeType_IsValid(int value) {
    return CardAccess_EyeType_IsValid(value);
  }
  static constexpr EyeType EyeType_MIN =
    CardAccess_EyeType_EyeType_MIN;
  static constexpr EyeType EyeType_MAX =
    CardAccess_EyeType_EyeType_MAX;
  static constexpr int EyeType_ARRAYSIZE =
    CardAccess_EyeType_EyeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EyeType_descriptor() {
    return CardAccess_EyeType_descriptor();
  }
  template<typename T>
  static inline const std::string& EyeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EyeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EyeType_Name.");
    return CardAccess_EyeType_Name(enum_t_value);
  }
  static inline bool EyeType_Parse(const std::string& name,
      EyeType* value) {
    return CardAccess_EyeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFingerprintFieldNumber = 2,
    kIrisFieldNumber = 4,
    kFaceFieldNumber = 5,
    kPinFieldNumber = 6,
    kFingerFieldNumber = 1,
    kEyeFieldNumber = 3,
  };
  // bytes fingerprint = 2;
  void clear_fingerprint();
  const std::string& fingerprint() const;
  void set_fingerprint(const std::string& value);
  void set_fingerprint(std::string&& value);
  void set_fingerprint(const char* value);
  void set_fingerprint(const void* value, size_t size);
  std::string* mutable_fingerprint();
  std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fingerprint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fingerprint(
      std::string* fingerprint);
  private:
  const std::string& _internal_fingerprint() const;
  void _internal_set_fingerprint(const std::string& value);
  std::string* _internal_mutable_fingerprint();
  public:

  // bytes iris = 4;
  void clear_iris();
  const std::string& iris() const;
  void set_iris(const std::string& value);
  void set_iris(std::string&& value);
  void set_iris(const char* value);
  void set_iris(const void* value, size_t size);
  std::string* mutable_iris();
  std::string* release_iris();
  void set_allocated_iris(std::string* iris);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_iris();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_iris(
      std::string* iris);
  private:
  const std::string& _internal_iris() const;
  void _internal_set_iris(const std::string& value);
  std::string* _internal_mutable_iris();
  public:

  // bytes face = 5;
  void clear_face();
  const std::string& face() const;
  void set_face(const std::string& value);
  void set_face(std::string&& value);
  void set_face(const char* value);
  void set_face(const void* value, size_t size);
  std::string* mutable_face();
  std::string* release_face();
  void set_allocated_face(std::string* face);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_face();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_face(
      std::string* face);
  private:
  const std::string& _internal_face() const;
  void _internal_set_face(const std::string& value);
  std::string* _internal_mutable_face();
  public:

  // string pin = 6;
  void clear_pin();
  const std::string& pin() const;
  void set_pin(const std::string& value);
  void set_pin(std::string&& value);
  void set_pin(const char* value);
  void set_pin(const char* value, size_t size);
  std::string* mutable_pin();
  std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pin(
      std::string* pin);
  private:
  const std::string& _internal_pin() const;
  void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .idpass.CardAccess.FingerType finger = 1;
  void clear_finger();
  ::idpass::CardAccess_FingerType finger() const;
  void set_finger(::idpass::CardAccess_FingerType value);
  private:
  ::idpass::CardAccess_FingerType _internal_finger() const;
  void _internal_set_finger(::idpass::CardAccess_FingerType value);
  public:

  // .idpass.CardAccess.EyeType eye = 3;
  void clear_eye();
  ::idpass::CardAccess_EyeType eye() const;
  void set_eye(::idpass::CardAccess_EyeType value);
  private:
  ::idpass::CardAccess_EyeType _internal_eye() const;
  void _internal_set_eye(::idpass::CardAccess_EyeType value);
  public:

  // @@protoc_insertion_point(class_scope:idpass.CardAccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iris_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr face_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  int finger_;
  int eye_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class PostalAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.PostalAddress) */ {
 public:
  inline PostalAddress() : PostalAddress(nullptr) {};
  virtual ~PostalAddress();

  PostalAddress(const PostalAddress& from);
  PostalAddress(PostalAddress&& from) noexcept
    : PostalAddress() {
    *this = ::std::move(from);
  }

  inline PostalAddress& operator=(const PostalAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostalAddress& operator=(PostalAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PostalAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostalAddress* internal_default_instance() {
    return reinterpret_cast<const PostalAddress*>(
               &_PostalAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostalAddress& a, PostalAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(PostalAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostalAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostalAddress* New() const final {
    return CreateMaybeMessage<PostalAddress>(nullptr);
  }

  PostalAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostalAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostalAddress& from);
  void MergeFrom(const PostalAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostalAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.PostalAddress";
  }
  protected:
  explicit PostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressLinesFieldNumber = 9,
    kRecipientsFieldNumber = 10,
    kRegionCodeFieldNumber = 2,
    kLanguageCodeFieldNumber = 3,
    kPostalCodeFieldNumber = 4,
    kSortingCodeFieldNumber = 5,
    kAdministrativeAreaFieldNumber = 6,
    kLocalityFieldNumber = 7,
    kSublocalityFieldNumber = 8,
    kOrganizationFieldNumber = 11,
    kRevisionFieldNumber = 1,
  };
  // repeated string address_lines = 9;
  int address_lines_size() const;
  private:
  int _internal_address_lines_size() const;
  public:
  void clear_address_lines();
  const std::string& address_lines(int index) const;
  std::string* mutable_address_lines(int index);
  void set_address_lines(int index, const std::string& value);
  void set_address_lines(int index, std::string&& value);
  void set_address_lines(int index, const char* value);
  void set_address_lines(int index, const char* value, size_t size);
  std::string* add_address_lines();
  void add_address_lines(const std::string& value);
  void add_address_lines(std::string&& value);
  void add_address_lines(const char* value);
  void add_address_lines(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address_lines() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address_lines();
  private:
  const std::string& _internal_address_lines(int index) const;
  std::string* _internal_add_address_lines();
  public:

  // repeated string recipients = 10;
  int recipients_size() const;
  private:
  int _internal_recipients_size() const;
  public:
  void clear_recipients();
  const std::string& recipients(int index) const;
  std::string* mutable_recipients(int index);
  void set_recipients(int index, const std::string& value);
  void set_recipients(int index, std::string&& value);
  void set_recipients(int index, const char* value);
  void set_recipients(int index, const char* value, size_t size);
  std::string* add_recipients();
  void add_recipients(const std::string& value);
  void add_recipients(std::string&& value);
  void add_recipients(const char* value);
  void add_recipients(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recipients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recipients();
  private:
  const std::string& _internal_recipients(int index) const;
  std::string* _internal_add_recipients();
  public:

  // string region_code = 2;
  void clear_region_code();
  const std::string& region_code() const;
  void set_region_code(const std::string& value);
  void set_region_code(std::string&& value);
  void set_region_code(const char* value);
  void set_region_code(const char* value, size_t size);
  std::string* mutable_region_code();
  std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region_code(
      std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // string language_code = 3;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language_code(
      std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string postal_code = 4;
  void clear_postal_code();
  const std::string& postal_code() const;
  void set_postal_code(const std::string& value);
  void set_postal_code(std::string&& value);
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  std::string* mutable_postal_code();
  std::string* release_postal_code();
  void set_allocated_postal_code(std::string* postal_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_postal_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_postal_code(
      std::string* postal_code);
  private:
  const std::string& _internal_postal_code() const;
  void _internal_set_postal_code(const std::string& value);
  std::string* _internal_mutable_postal_code();
  public:

  // string sorting_code = 5;
  void clear_sorting_code();
  const std::string& sorting_code() const;
  void set_sorting_code(const std::string& value);
  void set_sorting_code(std::string&& value);
  void set_sorting_code(const char* value);
  void set_sorting_code(const char* value, size_t size);
  std::string* mutable_sorting_code();
  std::string* release_sorting_code();
  void set_allocated_sorting_code(std::string* sorting_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sorting_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sorting_code(
      std::string* sorting_code);
  private:
  const std::string& _internal_sorting_code() const;
  void _internal_set_sorting_code(const std::string& value);
  std::string* _internal_mutable_sorting_code();
  public:

  // string administrative_area = 6;
  void clear_administrative_area();
  const std::string& administrative_area() const;
  void set_administrative_area(const std::string& value);
  void set_administrative_area(std::string&& value);
  void set_administrative_area(const char* value);
  void set_administrative_area(const char* value, size_t size);
  std::string* mutable_administrative_area();
  std::string* release_administrative_area();
  void set_allocated_administrative_area(std::string* administrative_area);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_administrative_area();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_administrative_area(
      std::string* administrative_area);
  private:
  const std::string& _internal_administrative_area() const;
  void _internal_set_administrative_area(const std::string& value);
  std::string* _internal_mutable_administrative_area();
  public:

  // string locality = 7;
  void clear_locality();
  const std::string& locality() const;
  void set_locality(const std::string& value);
  void set_locality(std::string&& value);
  void set_locality(const char* value);
  void set_locality(const char* value, size_t size);
  std::string* mutable_locality();
  std::string* release_locality();
  void set_allocated_locality(std::string* locality);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_locality();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_locality(
      std::string* locality);
  private:
  const std::string& _internal_locality() const;
  void _internal_set_locality(const std::string& value);
  std::string* _internal_mutable_locality();
  public:

  // string sublocality = 8;
  void clear_sublocality();
  const std::string& sublocality() const;
  void set_sublocality(const std::string& value);
  void set_sublocality(std::string&& value);
  void set_sublocality(const char* value);
  void set_sublocality(const char* value, size_t size);
  std::string* mutable_sublocality();
  std::string* release_sublocality();
  void set_allocated_sublocality(std::string* sublocality);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sublocality();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sublocality(
      std::string* sublocality);
  private:
  const std::string& _internal_sublocality() const;
  void _internal_set_sublocality(const std::string& value);
  std::string* _internal_mutable_sublocality();
  public:

  // string organization = 11;
  void clear_organization();
  const std::string& organization() const;
  void set_organization(const std::string& value);
  void set_organization(std::string&& value);
  void set_organization(const char* value);
  void set_organization(const char* value, size_t size);
  std::string* mutable_organization();
  std::string* release_organization();
  void set_allocated_organization(std::string* organization);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_organization();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_organization(
      std::string* organization);
  private:
  const std::string& _internal_organization() const;
  void _internal_set_organization(const std::string& value);
  std::string* _internal_mutable_organization();
  public:

  // int32 revision = 1;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::int32 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:idpass.PostalAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_lines_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recipients_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postal_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sorting_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr administrative_area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sublocality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_;
  ::PROTOBUF_NAMESPACE_ID::int32 revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class CardDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.CardDetails) */ {
 public:
  inline CardDetails() : CardDetails(nullptr) {};
  virtual ~CardDetails();

  CardDetails(const CardDetails& from);
  CardDetails(CardDetails&& from) noexcept
    : CardDetails() {
    *this = ::std::move(from);
  }

  inline CardDetails& operator=(const CardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CardDetails& operator=(CardDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CardDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CardDetails* internal_default_instance() {
    return reinterpret_cast<const CardDetails*>(
               &_CardDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CardDetails& a, CardDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CardDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CardDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CardDetails* New() const final {
    return CreateMaybeMessage<CardDetails>(nullptr);
  }

  CardDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CardDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CardDetails& from);
  void MergeFrom(const CardDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CardDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.CardDetails";
  }
  protected:
  explicit CardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 5,
    kSurNameFieldNumber = 1,
    kGivenNameFieldNumber = 2,
    kPlaceOfBirthFieldNumber = 3,
    kFullNameFieldNumber = 8,
    kUINFieldNumber = 9,
    kDateOfBirthFieldNumber = 4,
    kPostalAddressFieldNumber = 10,
    kCreatedAtFieldNumber = 6,
    kGenderFieldNumber = 7,
  };
  // repeated .idpass.Pair extra = 5;
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  ::idpass::Pair* mutable_extra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
      mutable_extra();
  private:
  const ::idpass::Pair& _internal_extra(int index) const;
  ::idpass::Pair* _internal_add_extra();
  public:
  const ::idpass::Pair& extra(int index) const;
  ::idpass::Pair* add_extra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
      extra() const;

  // string surName = 1;
  void clear_surname();
  const std::string& surname() const;
  void set_surname(const std::string& value);
  void set_surname(std::string&& value);
  void set_surname(const char* value);
  void set_surname(const char* value, size_t size);
  std::string* mutable_surname();
  std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_surname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_surname(
      std::string* surname);
  private:
  const std::string& _internal_surname() const;
  void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // string givenName = 2;
  void clear_givenname();
  const std::string& givenname() const;
  void set_givenname(const std::string& value);
  void set_givenname(std::string&& value);
  void set_givenname(const char* value);
  void set_givenname(const char* value, size_t size);
  std::string* mutable_givenname();
  std::string* release_givenname();
  void set_allocated_givenname(std::string* givenname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_givenname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_givenname(
      std::string* givenname);
  private:
  const std::string& _internal_givenname() const;
  void _internal_set_givenname(const std::string& value);
  std::string* _internal_mutable_givenname();
  public:

  // string placeOfBirth = 3;
  void clear_placeofbirth();
  const std::string& placeofbirth() const;
  void set_placeofbirth(const std::string& value);
  void set_placeofbirth(std::string&& value);
  void set_placeofbirth(const char* value);
  void set_placeofbirth(const char* value, size_t size);
  std::string* mutable_placeofbirth();
  std::string* release_placeofbirth();
  void set_allocated_placeofbirth(std::string* placeofbirth);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_placeofbirth();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_placeofbirth(
      std::string* placeofbirth);
  private:
  const std::string& _internal_placeofbirth() const;
  void _internal_set_placeofbirth(const std::string& value);
  std::string* _internal_mutable_placeofbirth();
  public:

  // string fullName = 8;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fullname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fullname(
      std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // string UIN = 9;
  void clear_uin();
  const std::string& uin() const;
  void set_uin(const std::string& value);
  void set_uin(std::string&& value);
  void set_uin(const char* value);
  void set_uin(const char* value, size_t size);
  std::string* mutable_uin();
  std::string* release_uin();
  void set_allocated_uin(std::string* uin);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uin();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uin(
      std::string* uin);
  private:
  const std::string& _internal_uin() const;
  void _internal_set_uin(const std::string& value);
  std::string* _internal_mutable_uin();
  public:

  // .idpass.Date dateOfBirth = 4;
  bool has_dateofbirth() const;
  private:
  bool _internal_has_dateofbirth() const;
  public:
  void clear_dateofbirth();
  const ::idpass::Date& dateofbirth() const;
  ::idpass::Date* release_dateofbirth();
  ::idpass::Date* mutable_dateofbirth();
  void set_allocated_dateofbirth(::idpass::Date* dateofbirth);
  private:
  const ::idpass::Date& _internal_dateofbirth() const;
  ::idpass::Date* _internal_mutable_dateofbirth();
  public:
  void unsafe_arena_set_allocated_dateofbirth(
      ::idpass::Date* dateofbirth);
  ::idpass::Date* unsafe_arena_release_dateofbirth();

  // .idpass.PostalAddress postalAddress = 10;
  bool has_postaladdress() const;
  private:
  bool _internal_has_postaladdress() const;
  public:
  void clear_postaladdress();
  const ::idpass::PostalAddress& postaladdress() const;
  ::idpass::PostalAddress* release_postaladdress();
  ::idpass::PostalAddress* mutable_postaladdress();
  void set_allocated_postaladdress(::idpass::PostalAddress* postaladdress);
  private:
  const ::idpass::PostalAddress& _internal_postaladdress() const;
  ::idpass::PostalAddress* _internal_mutable_postaladdress();
  public:
  void unsafe_arena_set_allocated_postaladdress(
      ::idpass::PostalAddress* postaladdress);
  ::idpass::PostalAddress* unsafe_arena_release_postaladdress();

  // int64 createdAt = 6;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::int64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 gender = 7;
  void clear_gender();
  ::PROTOBUF_NAMESPACE_ID::int32 gender() const;
  void set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gender() const;
  void _internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:idpass.CardDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair > extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr givenname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr placeofbirth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uin_;
  ::idpass::Date* dateofbirth_;
  ::idpass::PostalAddress* postaladdress_;
  ::PROTOBUF_NAMESPACE_ID::int64 createdat_;
  ::PROTOBUF_NAMESPACE_ID::int32 gender_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class IDPassCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.IDPassCard) */ {
 public:
  inline IDPassCard() : IDPassCard(nullptr) {};
  virtual ~IDPassCard();

  IDPassCard(const IDPassCard& from);
  IDPassCard(IDPassCard&& from) noexcept
    : IDPassCard() {
    *this = ::std::move(from);
  }

  inline IDPassCard& operator=(const IDPassCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDPassCard& operator=(IDPassCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDPassCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDPassCard* internal_default_instance() {
    return reinterpret_cast<const IDPassCard*>(
               &_IDPassCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IDPassCard& a, IDPassCard& b) {
    a.Swap(&b);
  }
  inline void Swap(IDPassCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDPassCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDPassCard* New() const final {
    return CreateMaybeMessage<IDPassCard>(nullptr);
  }

  IDPassCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDPassCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDPassCard& from);
  void MergeFrom(const IDPassCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDPassCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.IDPassCard";
  }
  protected:
  explicit IDPassCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 3,
    kAccessFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // bytes encryptionKey = 3;
  void clear_encryptionkey();
  const std::string& encryptionkey() const;
  void set_encryptionkey(const std::string& value);
  void set_encryptionkey(std::string&& value);
  void set_encryptionkey(const char* value);
  void set_encryptionkey(const void* value, size_t size);
  std::string* mutable_encryptionkey();
  std::string* release_encryptionkey();
  void set_allocated_encryptionkey(std::string* encryptionkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encryptionkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encryptionkey(
      std::string* encryptionkey);
  private:
  const std::string& _internal_encryptionkey() const;
  void _internal_set_encryptionkey(const std::string& value);
  std::string* _internal_mutable_encryptionkey();
  public:

  // .idpass.CardAccess access = 1;
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  const ::idpass::CardAccess& access() const;
  ::idpass::CardAccess* release_access();
  ::idpass::CardAccess* mutable_access();
  void set_allocated_access(::idpass::CardAccess* access);
  private:
  const ::idpass::CardAccess& _internal_access() const;
  ::idpass::CardAccess* _internal_mutable_access();
  public:
  void unsafe_arena_set_allocated_access(
      ::idpass::CardAccess* access);
  ::idpass::CardAccess* unsafe_arena_release_access();

  // .idpass.CardDetails details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::idpass::CardDetails& details() const;
  ::idpass::CardDetails* release_details();
  ::idpass::CardDetails* mutable_details();
  void set_allocated_details(::idpass::CardDetails* details);
  private:
  const ::idpass::CardDetails& _internal_details() const;
  ::idpass::CardDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::idpass::CardDetails* details);
  ::idpass::CardDetails* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:idpass.IDPassCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptionkey_;
  ::idpass::CardAccess* access_;
  ::idpass::CardDetails* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class SignedIDPassCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.SignedIDPassCard) */ {
 public:
  inline SignedIDPassCard() : SignedIDPassCard(nullptr) {};
  virtual ~SignedIDPassCard();

  SignedIDPassCard(const SignedIDPassCard& from);
  SignedIDPassCard(SignedIDPassCard&& from) noexcept
    : SignedIDPassCard() {
    *this = ::std::move(from);
  }

  inline SignedIDPassCard& operator=(const SignedIDPassCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedIDPassCard& operator=(SignedIDPassCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignedIDPassCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedIDPassCard* internal_default_instance() {
    return reinterpret_cast<const SignedIDPassCard*>(
               &_SignedIDPassCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SignedIDPassCard& a, SignedIDPassCard& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedIDPassCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedIDPassCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedIDPassCard* New() const final {
    return CreateMaybeMessage<SignedIDPassCard>(nullptr);
  }

  SignedIDPassCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedIDPassCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignedIDPassCard& from);
  void MergeFrom(const SignedIDPassCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedIDPassCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.SignedIDPassCard";
  }
  protected:
  explicit SignedIDPassCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardFieldNumber = 1,
  };
  // .idpass.IDPassCard card = 1;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::idpass::IDPassCard& card() const;
  ::idpass::IDPassCard* release_card();
  ::idpass::IDPassCard* mutable_card();
  void set_allocated_card(::idpass::IDPassCard* card);
  private:
  const ::idpass::IDPassCard& _internal_card() const;
  ::idpass::IDPassCard* _internal_mutable_card();
  public:
  void unsafe_arena_set_allocated_card(
      ::idpass::IDPassCard* card);
  ::idpass::IDPassCard* unsafe_arena_release_card();

  // @@protoc_insertion_point(class_scope:idpass.SignedIDPassCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::idpass::IDPassCard* card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class PublicSignedIDPassCard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.PublicSignedIDPassCard) */ {
 public:
  inline PublicSignedIDPassCard() : PublicSignedIDPassCard(nullptr) {};
  virtual ~PublicSignedIDPassCard();

  PublicSignedIDPassCard(const PublicSignedIDPassCard& from);
  PublicSignedIDPassCard(PublicSignedIDPassCard&& from) noexcept
    : PublicSignedIDPassCard() {
    *this = ::std::move(from);
  }

  inline PublicSignedIDPassCard& operator=(const PublicSignedIDPassCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicSignedIDPassCard& operator=(PublicSignedIDPassCard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PublicSignedIDPassCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicSignedIDPassCard* internal_default_instance() {
    return reinterpret_cast<const PublicSignedIDPassCard*>(
               &_PublicSignedIDPassCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PublicSignedIDPassCard& a, PublicSignedIDPassCard& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicSignedIDPassCard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicSignedIDPassCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PublicSignedIDPassCard* New() const final {
    return CreateMaybeMessage<PublicSignedIDPassCard>(nullptr);
  }

  PublicSignedIDPassCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PublicSignedIDPassCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PublicSignedIDPassCard& from);
  void MergeFrom(const PublicSignedIDPassCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicSignedIDPassCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.PublicSignedIDPassCard";
  }
  protected:
  explicit PublicSignedIDPassCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
  };
  // .idpass.CardDetails details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::idpass::CardDetails& details() const;
  ::idpass::CardDetails* release_details();
  ::idpass::CardDetails* mutable_details();
  void set_allocated_details(::idpass::CardDetails* details);
  private:
  const ::idpass::CardDetails& _internal_details() const;
  ::idpass::CardDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::idpass::CardDetails* details);
  ::idpass::CardDetails* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:idpass.PublicSignedIDPassCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::idpass::CardDetails* details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class Certificate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.Certificate) */ {
 public:
  inline Certificate() : Certificate(nullptr) {};
  virtual ~Certificate();

  Certificate(const Certificate& from);
  Certificate(Certificate&& from) noexcept
    : Certificate() {
    *this = ::std::move(from);
  }

  inline Certificate& operator=(const Certificate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Certificate& operator=(Certificate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Certificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Certificate* internal_default_instance() {
    return reinterpret_cast<const Certificate*>(
               &_Certificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Certificate& a, Certificate& b) {
    a.Swap(&b);
  }
  inline void Swap(Certificate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Certificate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Certificate* New() const final {
    return CreateMaybeMessage<Certificate>(nullptr);
  }

  Certificate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Certificate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Certificate& from);
  void MergeFrom(const Certificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Certificate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.Certificate";
  }
  protected:
  explicit Certificate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kIssuerkeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
  };
  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pubkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pubkey(
      std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes issuerkey = 2;
  void clear_issuerkey();
  const std::string& issuerkey() const;
  void set_issuerkey(const std::string& value);
  void set_issuerkey(std::string&& value);
  void set_issuerkey(const char* value);
  void set_issuerkey(const void* value, size_t size);
  std::string* mutable_issuerkey();
  std::string* release_issuerkey();
  void set_allocated_issuerkey(std::string* issuerkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_issuerkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_issuerkey(
      std::string* issuerkey);
  private:
  const std::string& _internal_issuerkey() const;
  void _internal_set_issuerkey(const std::string& value);
  std::string* _internal_mutable_issuerkey();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:idpass.Certificate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuerkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// -------------------------------------------------------------------

class IDPassCards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:idpass.IDPassCards) */ {
 public:
  inline IDPassCards() : IDPassCards(nullptr) {};
  virtual ~IDPassCards();

  IDPassCards(const IDPassCards& from);
  IDPassCards(IDPassCards&& from) noexcept
    : IDPassCards() {
    *this = ::std::move(from);
  }

  inline IDPassCards& operator=(const IDPassCards& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDPassCards& operator=(IDPassCards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDPassCards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDPassCards* internal_default_instance() {
    return reinterpret_cast<const IDPassCards*>(
               &_IDPassCards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IDPassCards& a, IDPassCards& b) {
    a.Swap(&b);
  }
  inline void Swap(IDPassCards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDPassCards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDPassCards* New() const final {
    return CreateMaybeMessage<IDPassCards>(nullptr);
  }

  IDPassCards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDPassCards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDPassCards& from);
  void MergeFrom(const IDPassCards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDPassCards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "idpass.IDPassCards";
  }
  protected:
  explicit IDPassCards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_idpasslite_2eproto);
    return ::descriptor_table_idpasslite_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificatesFieldNumber = 5,
    kEncryptedCardFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kSignerPublicKeyFieldNumber = 4,
    kPublicCardFieldNumber = 1,
  };
  // repeated .idpass.Certificate certificates = 5;
  int certificates_size() const;
  private:
  int _internal_certificates_size() const;
  public:
  void clear_certificates();
  ::idpass::Certificate* mutable_certificates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >*
      mutable_certificates();
  private:
  const ::idpass::Certificate& _internal_certificates(int index) const;
  ::idpass::Certificate* _internal_add_certificates();
  public:
  const ::idpass::Certificate& certificates(int index) const;
  ::idpass::Certificate* add_certificates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >&
      certificates() const;

  // bytes encryptedCard = 2;
  void clear_encryptedcard();
  const std::string& encryptedcard() const;
  void set_encryptedcard(const std::string& value);
  void set_encryptedcard(std::string&& value);
  void set_encryptedcard(const char* value);
  void set_encryptedcard(const void* value, size_t size);
  std::string* mutable_encryptedcard();
  std::string* release_encryptedcard();
  void set_allocated_encryptedcard(std::string* encryptedcard);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encryptedcard();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encryptedcard(
      std::string* encryptedcard);
  private:
  const std::string& _internal_encryptedcard() const;
  void _internal_set_encryptedcard(const std::string& value);
  std::string* _internal_mutable_encryptedcard();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes signerPublicKey = 4;
  void clear_signerpublickey();
  const std::string& signerpublickey() const;
  void set_signerpublickey(const std::string& value);
  void set_signerpublickey(std::string&& value);
  void set_signerpublickey(const char* value);
  void set_signerpublickey(const void* value, size_t size);
  std::string* mutable_signerpublickey();
  std::string* release_signerpublickey();
  void set_allocated_signerpublickey(std::string* signerpublickey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signerpublickey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signerpublickey(
      std::string* signerpublickey);
  private:
  const std::string& _internal_signerpublickey() const;
  void _internal_set_signerpublickey(const std::string& value);
  std::string* _internal_mutable_signerpublickey();
  public:

  // .idpass.PublicSignedIDPassCard publicCard = 1;
  bool has_publiccard() const;
  private:
  bool _internal_has_publiccard() const;
  public:
  void clear_publiccard();
  const ::idpass::PublicSignedIDPassCard& publiccard() const;
  ::idpass::PublicSignedIDPassCard* release_publiccard();
  ::idpass::PublicSignedIDPassCard* mutable_publiccard();
  void set_allocated_publiccard(::idpass::PublicSignedIDPassCard* publiccard);
  private:
  const ::idpass::PublicSignedIDPassCard& _internal_publiccard() const;
  ::idpass::PublicSignedIDPassCard* _internal_mutable_publiccard();
  public:
  void unsafe_arena_set_allocated_publiccard(
      ::idpass::PublicSignedIDPassCard* publiccard);
  ::idpass::PublicSignedIDPassCard* unsafe_arena_release_publiccard();

  // @@protoc_insertion_point(class_scope:idpass.IDPassCards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate > certificates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryptedcard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signerpublickey_;
  ::idpass::PublicSignedIDPassCard* publiccard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_idpasslite_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Date

// int32 year = 1;
inline void Date::clear_year() {
  year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::year() const {
  // @@protoc_insertion_point(field_get:idpass.Date.year)
  return _internal_year();
}
inline void Date::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  year_ = value;
}
inline void Date::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:idpass.Date.year)
}

// int32 month = 2;
inline void Date::clear_month() {
  month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::month() const {
  // @@protoc_insertion_point(field_get:idpass.Date.month)
  return _internal_month();
}
inline void Date::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  month_ = value;
}
inline void Date::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:idpass.Date.month)
}

// int32 day = 3;
inline void Date::clear_day() {
  day_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Date::day() const {
  // @@protoc_insertion_point(field_get:idpass.Date.day)
  return _internal_day();
}
inline void Date::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  day_ = value;
}
inline void Date::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:idpass.Date.day)
}

// -------------------------------------------------------------------

// Pair

// string key = 1;
inline void Pair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:idpass.Pair.key)
  return _internal_key();
}
inline void Pair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:idpass.Pair.key)
}
inline std::string* Pair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:idpass.Pair.key)
  return _internal_mutable_key();
}
inline const std::string& Pair::_internal_key() const {
  return key_.Get();
}
inline void Pair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.Pair.key)
}
inline void Pair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.Pair.key)
}
inline void Pair::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.Pair.key)
}
inline std::string* Pair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pair::release_key() {
  // @@protoc_insertion_point(field_release:idpass.Pair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.Pair.key)
}
inline std::string* Pair::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.Pair.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pair::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.Pair.key)
}

// string value = 2;
inline void Pair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Pair::value() const {
  // @@protoc_insertion_point(field_get:idpass.Pair.value)
  return _internal_value();
}
inline void Pair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:idpass.Pair.value)
}
inline std::string* Pair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:idpass.Pair.value)
  return _internal_mutable_value();
}
inline const std::string& Pair::_internal_value() const {
  return value_.Get();
}
inline void Pair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.Pair.value)
}
inline void Pair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.Pair.value)
}
inline void Pair::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.Pair.value)
}
inline std::string* Pair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pair::release_value() {
  // @@protoc_insertion_point(field_release:idpass.Pair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.Pair.value)
}
inline std::string* Pair::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.Pair.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Pair::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.Pair.value)
}

// -------------------------------------------------------------------

// Dictionary

// repeated .idpass.Pair pairs = 1;
inline int Dictionary::_internal_pairs_size() const {
  return pairs_.size();
}
inline int Dictionary::pairs_size() const {
  return _internal_pairs_size();
}
inline void Dictionary::clear_pairs() {
  pairs_.Clear();
}
inline ::idpass::Pair* Dictionary::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:idpass.Dictionary.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
Dictionary::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:idpass.Dictionary.pairs)
  return &pairs_;
}
inline const ::idpass::Pair& Dictionary::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::idpass::Pair& Dictionary::pairs(int index) const {
  // @@protoc_insertion_point(field_get:idpass.Dictionary.pairs)
  return _internal_pairs(index);
}
inline ::idpass::Pair* Dictionary::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::idpass::Pair* Dictionary::add_pairs() {
  // @@protoc_insertion_point(field_add:idpass.Dictionary.pairs)
  return _internal_add_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
Dictionary::pairs() const {
  // @@protoc_insertion_point(field_list:idpass.Dictionary.pairs)
  return pairs_;
}

// -------------------------------------------------------------------

// CardAccess

// .idpass.CardAccess.FingerType finger = 1;
inline void CardAccess::clear_finger() {
  finger_ = 0;
}
inline ::idpass::CardAccess_FingerType CardAccess::_internal_finger() const {
  return static_cast< ::idpass::CardAccess_FingerType >(finger_);
}
inline ::idpass::CardAccess_FingerType CardAccess::finger() const {
  // @@protoc_insertion_point(field_get:idpass.CardAccess.finger)
  return _internal_finger();
}
inline void CardAccess::_internal_set_finger(::idpass::CardAccess_FingerType value) {
  
  finger_ = value;
}
inline void CardAccess::set_finger(::idpass::CardAccess_FingerType value) {
  _internal_set_finger(value);
  // @@protoc_insertion_point(field_set:idpass.CardAccess.finger)
}

// bytes fingerprint = 2;
inline void CardAccess::clear_fingerprint() {
  fingerprint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardAccess::fingerprint() const {
  // @@protoc_insertion_point(field_get:idpass.CardAccess.fingerprint)
  return _internal_fingerprint();
}
inline void CardAccess::set_fingerprint(const std::string& value) {
  _internal_set_fingerprint(value);
  // @@protoc_insertion_point(field_set:idpass.CardAccess.fingerprint)
}
inline std::string* CardAccess::mutable_fingerprint() {
  // @@protoc_insertion_point(field_mutable:idpass.CardAccess.fingerprint)
  return _internal_mutable_fingerprint();
}
inline const std::string& CardAccess::_internal_fingerprint() const {
  return fingerprint_.Get();
}
inline void CardAccess::_internal_set_fingerprint(const std::string& value) {
  
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardAccess::set_fingerprint(std::string&& value) {
  
  fingerprint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardAccess.fingerprint)
}
inline void CardAccess::set_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardAccess.fingerprint)
}
inline void CardAccess::set_fingerprint(const void* value,
    size_t size) {
  
  fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardAccess.fingerprint)
}
inline std::string* CardAccess::_internal_mutable_fingerprint() {
  
  return fingerprint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardAccess::release_fingerprint() {
  // @@protoc_insertion_point(field_release:idpass.CardAccess.fingerprint)
  return fingerprint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardAccess::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  fingerprint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fingerprint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardAccess.fingerprint)
}
inline std::string* CardAccess::unsafe_arena_release_fingerprint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardAccess.fingerprint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fingerprint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardAccess::unsafe_arena_set_allocated_fingerprint(
    std::string* fingerprint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  fingerprint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fingerprint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardAccess.fingerprint)
}

// .idpass.CardAccess.EyeType eye = 3;
inline void CardAccess::clear_eye() {
  eye_ = 0;
}
inline ::idpass::CardAccess_EyeType CardAccess::_internal_eye() const {
  return static_cast< ::idpass::CardAccess_EyeType >(eye_);
}
inline ::idpass::CardAccess_EyeType CardAccess::eye() const {
  // @@protoc_insertion_point(field_get:idpass.CardAccess.eye)
  return _internal_eye();
}
inline void CardAccess::_internal_set_eye(::idpass::CardAccess_EyeType value) {
  
  eye_ = value;
}
inline void CardAccess::set_eye(::idpass::CardAccess_EyeType value) {
  _internal_set_eye(value);
  // @@protoc_insertion_point(field_set:idpass.CardAccess.eye)
}

// bytes iris = 4;
inline void CardAccess::clear_iris() {
  iris_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardAccess::iris() const {
  // @@protoc_insertion_point(field_get:idpass.CardAccess.iris)
  return _internal_iris();
}
inline void CardAccess::set_iris(const std::string& value) {
  _internal_set_iris(value);
  // @@protoc_insertion_point(field_set:idpass.CardAccess.iris)
}
inline std::string* CardAccess::mutable_iris() {
  // @@protoc_insertion_point(field_mutable:idpass.CardAccess.iris)
  return _internal_mutable_iris();
}
inline const std::string& CardAccess::_internal_iris() const {
  return iris_.Get();
}
inline void CardAccess::_internal_set_iris(const std::string& value) {
  
  iris_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardAccess::set_iris(std::string&& value) {
  
  iris_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardAccess.iris)
}
inline void CardAccess::set_iris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iris_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardAccess.iris)
}
inline void CardAccess::set_iris(const void* value,
    size_t size) {
  
  iris_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardAccess.iris)
}
inline std::string* CardAccess::_internal_mutable_iris() {
  
  return iris_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardAccess::release_iris() {
  // @@protoc_insertion_point(field_release:idpass.CardAccess.iris)
  return iris_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardAccess::set_allocated_iris(std::string* iris) {
  if (iris != nullptr) {
    
  } else {
    
  }
  iris_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), iris,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardAccess.iris)
}
inline std::string* CardAccess::unsafe_arena_release_iris() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardAccess.iris)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return iris_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardAccess::unsafe_arena_set_allocated_iris(
    std::string* iris) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (iris != nullptr) {
    
  } else {
    
  }
  iris_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      iris, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardAccess.iris)
}

// bytes face = 5;
inline void CardAccess::clear_face() {
  face_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardAccess::face() const {
  // @@protoc_insertion_point(field_get:idpass.CardAccess.face)
  return _internal_face();
}
inline void CardAccess::set_face(const std::string& value) {
  _internal_set_face(value);
  // @@protoc_insertion_point(field_set:idpass.CardAccess.face)
}
inline std::string* CardAccess::mutable_face() {
  // @@protoc_insertion_point(field_mutable:idpass.CardAccess.face)
  return _internal_mutable_face();
}
inline const std::string& CardAccess::_internal_face() const {
  return face_.Get();
}
inline void CardAccess::_internal_set_face(const std::string& value) {
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardAccess::set_face(std::string&& value) {
  
  face_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardAccess.face)
}
inline void CardAccess::set_face(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardAccess.face)
}
inline void CardAccess::set_face(const void* value,
    size_t size) {
  
  face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardAccess.face)
}
inline std::string* CardAccess::_internal_mutable_face() {
  
  return face_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardAccess::release_face() {
  // @@protoc_insertion_point(field_release:idpass.CardAccess.face)
  return face_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardAccess::set_allocated_face(std::string* face) {
  if (face != nullptr) {
    
  } else {
    
  }
  face_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), face,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardAccess.face)
}
inline std::string* CardAccess::unsafe_arena_release_face() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardAccess.face)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return face_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardAccess::unsafe_arena_set_allocated_face(
    std::string* face) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (face != nullptr) {
    
  } else {
    
  }
  face_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      face, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardAccess.face)
}

// string pin = 6;
inline void CardAccess::clear_pin() {
  pin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardAccess::pin() const {
  // @@protoc_insertion_point(field_get:idpass.CardAccess.pin)
  return _internal_pin();
}
inline void CardAccess::set_pin(const std::string& value) {
  _internal_set_pin(value);
  // @@protoc_insertion_point(field_set:idpass.CardAccess.pin)
}
inline std::string* CardAccess::mutable_pin() {
  // @@protoc_insertion_point(field_mutable:idpass.CardAccess.pin)
  return _internal_mutable_pin();
}
inline const std::string& CardAccess::_internal_pin() const {
  return pin_.Get();
}
inline void CardAccess::_internal_set_pin(const std::string& value) {
  
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardAccess::set_pin(std::string&& value) {
  
  pin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardAccess.pin)
}
inline void CardAccess::set_pin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardAccess.pin)
}
inline void CardAccess::set_pin(const char* value,
    size_t size) {
  
  pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardAccess.pin)
}
inline std::string* CardAccess::_internal_mutable_pin() {
  
  return pin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardAccess::release_pin() {
  // @@protoc_insertion_point(field_release:idpass.CardAccess.pin)
  return pin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardAccess::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardAccess.pin)
}
inline std::string* CardAccess::unsafe_arena_release_pin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardAccess.pin)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardAccess::unsafe_arena_set_allocated_pin(
    std::string* pin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardAccess.pin)
}

// -------------------------------------------------------------------

// PostalAddress

// int32 revision = 1;
inline void PostalAddress::clear_revision() {
  revision_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PostalAddress::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PostalAddress::revision() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.revision)
  return _internal_revision();
}
inline void PostalAddress::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  revision_ = value;
}
inline void PostalAddress::set_revision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.revision)
}

// string region_code = 2;
inline void PostalAddress::clear_region_code() {
  region_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::region_code() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.region_code)
  return _internal_region_code();
}
inline void PostalAddress::set_region_code(const std::string& value) {
  _internal_set_region_code(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.region_code)
}
inline std::string* PostalAddress::mutable_region_code() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.region_code)
  return _internal_mutable_region_code();
}
inline const std::string& PostalAddress::_internal_region_code() const {
  return region_code_.Get();
}
inline void PostalAddress::_internal_set_region_code(const std::string& value) {
  
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_region_code(std::string&& value) {
  
  region_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.region_code)
}
inline void PostalAddress::set_region_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.region_code)
}
inline void PostalAddress::set_region_code(const char* value,
    size_t size) {
  
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.region_code)
}
inline std::string* PostalAddress::_internal_mutable_region_code() {
  
  return region_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_region_code() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.region_code)
  return region_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.region_code)
}
inline std::string* PostalAddress::unsafe_arena_release_region_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.region_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_region_code(
    std::string* region_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region_code != nullptr) {
    
  } else {
    
  }
  region_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.region_code)
}

// string language_code = 3;
inline void PostalAddress::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::language_code() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.language_code)
  return _internal_language_code();
}
inline void PostalAddress::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.language_code)
}
inline std::string* PostalAddress::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& PostalAddress::_internal_language_code() const {
  return language_code_.Get();
}
inline void PostalAddress::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_language_code(std::string&& value) {
  
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.language_code)
}
inline void PostalAddress::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.language_code)
}
inline void PostalAddress::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.language_code)
}
inline std::string* PostalAddress::_internal_mutable_language_code() {
  
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_language_code() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.language_code)
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.language_code)
}
inline std::string* PostalAddress::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.language_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_language_code(
    std::string* language_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.language_code)
}

// string postal_code = 4;
inline void PostalAddress::clear_postal_code() {
  postal_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::postal_code() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.postal_code)
  return _internal_postal_code();
}
inline void PostalAddress::set_postal_code(const std::string& value) {
  _internal_set_postal_code(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.postal_code)
}
inline std::string* PostalAddress::mutable_postal_code() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.postal_code)
  return _internal_mutable_postal_code();
}
inline const std::string& PostalAddress::_internal_postal_code() const {
  return postal_code_.Get();
}
inline void PostalAddress::_internal_set_postal_code(const std::string& value) {
  
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_postal_code(std::string&& value) {
  
  postal_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.postal_code)
}
inline void PostalAddress::set_postal_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.postal_code)
}
inline void PostalAddress::set_postal_code(const char* value,
    size_t size) {
  
  postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.postal_code)
}
inline std::string* PostalAddress::_internal_mutable_postal_code() {
  
  return postal_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_postal_code() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.postal_code)
  return postal_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_postal_code(std::string* postal_code) {
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), postal_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.postal_code)
}
inline std::string* PostalAddress::unsafe_arena_release_postal_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.postal_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return postal_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_postal_code(
    std::string* postal_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (postal_code != nullptr) {
    
  } else {
    
  }
  postal_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      postal_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.postal_code)
}

// string sorting_code = 5;
inline void PostalAddress::clear_sorting_code() {
  sorting_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::sorting_code() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.sorting_code)
  return _internal_sorting_code();
}
inline void PostalAddress::set_sorting_code(const std::string& value) {
  _internal_set_sorting_code(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.sorting_code)
}
inline std::string* PostalAddress::mutable_sorting_code() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.sorting_code)
  return _internal_mutable_sorting_code();
}
inline const std::string& PostalAddress::_internal_sorting_code() const {
  return sorting_code_.Get();
}
inline void PostalAddress::_internal_set_sorting_code(const std::string& value) {
  
  sorting_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_sorting_code(std::string&& value) {
  
  sorting_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.sorting_code)
}
inline void PostalAddress::set_sorting_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sorting_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.sorting_code)
}
inline void PostalAddress::set_sorting_code(const char* value,
    size_t size) {
  
  sorting_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.sorting_code)
}
inline std::string* PostalAddress::_internal_mutable_sorting_code() {
  
  return sorting_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_sorting_code() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.sorting_code)
  return sorting_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_sorting_code(std::string* sorting_code) {
  if (sorting_code != nullptr) {
    
  } else {
    
  }
  sorting_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sorting_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.sorting_code)
}
inline std::string* PostalAddress::unsafe_arena_release_sorting_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.sorting_code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sorting_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_sorting_code(
    std::string* sorting_code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sorting_code != nullptr) {
    
  } else {
    
  }
  sorting_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sorting_code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.sorting_code)
}

// string administrative_area = 6;
inline void PostalAddress::clear_administrative_area() {
  administrative_area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::administrative_area() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.administrative_area)
  return _internal_administrative_area();
}
inline void PostalAddress::set_administrative_area(const std::string& value) {
  _internal_set_administrative_area(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.administrative_area)
}
inline std::string* PostalAddress::mutable_administrative_area() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.administrative_area)
  return _internal_mutable_administrative_area();
}
inline const std::string& PostalAddress::_internal_administrative_area() const {
  return administrative_area_.Get();
}
inline void PostalAddress::_internal_set_administrative_area(const std::string& value) {
  
  administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_administrative_area(std::string&& value) {
  
  administrative_area_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.administrative_area)
}
inline void PostalAddress::set_administrative_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.administrative_area)
}
inline void PostalAddress::set_administrative_area(const char* value,
    size_t size) {
  
  administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.administrative_area)
}
inline std::string* PostalAddress::_internal_mutable_administrative_area() {
  
  return administrative_area_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_administrative_area() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.administrative_area)
  return administrative_area_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_administrative_area(std::string* administrative_area) {
  if (administrative_area != nullptr) {
    
  } else {
    
  }
  administrative_area_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), administrative_area,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.administrative_area)
}
inline std::string* PostalAddress::unsafe_arena_release_administrative_area() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.administrative_area)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return administrative_area_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_administrative_area(
    std::string* administrative_area) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (administrative_area != nullptr) {
    
  } else {
    
  }
  administrative_area_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      administrative_area, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.administrative_area)
}

// string locality = 7;
inline void PostalAddress::clear_locality() {
  locality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::locality() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.locality)
  return _internal_locality();
}
inline void PostalAddress::set_locality(const std::string& value) {
  _internal_set_locality(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.locality)
}
inline std::string* PostalAddress::mutable_locality() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.locality)
  return _internal_mutable_locality();
}
inline const std::string& PostalAddress::_internal_locality() const {
  return locality_.Get();
}
inline void PostalAddress::_internal_set_locality(const std::string& value) {
  
  locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_locality(std::string&& value) {
  
  locality_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.locality)
}
inline void PostalAddress::set_locality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.locality)
}
inline void PostalAddress::set_locality(const char* value,
    size_t size) {
  
  locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.locality)
}
inline std::string* PostalAddress::_internal_mutable_locality() {
  
  return locality_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_locality() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.locality)
  return locality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_locality(std::string* locality) {
  if (locality != nullptr) {
    
  } else {
    
  }
  locality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locality,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.locality)
}
inline std::string* PostalAddress::unsafe_arena_release_locality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.locality)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return locality_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_locality(
    std::string* locality) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (locality != nullptr) {
    
  } else {
    
  }
  locality_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      locality, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.locality)
}

// string sublocality = 8;
inline void PostalAddress::clear_sublocality() {
  sublocality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::sublocality() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.sublocality)
  return _internal_sublocality();
}
inline void PostalAddress::set_sublocality(const std::string& value) {
  _internal_set_sublocality(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.sublocality)
}
inline std::string* PostalAddress::mutable_sublocality() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.sublocality)
  return _internal_mutable_sublocality();
}
inline const std::string& PostalAddress::_internal_sublocality() const {
  return sublocality_.Get();
}
inline void PostalAddress::_internal_set_sublocality(const std::string& value) {
  
  sublocality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_sublocality(std::string&& value) {
  
  sublocality_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.sublocality)
}
inline void PostalAddress::set_sublocality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sublocality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.sublocality)
}
inline void PostalAddress::set_sublocality(const char* value,
    size_t size) {
  
  sublocality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.sublocality)
}
inline std::string* PostalAddress::_internal_mutable_sublocality() {
  
  return sublocality_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_sublocality() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.sublocality)
  return sublocality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_sublocality(std::string* sublocality) {
  if (sublocality != nullptr) {
    
  } else {
    
  }
  sublocality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sublocality,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.sublocality)
}
inline std::string* PostalAddress::unsafe_arena_release_sublocality() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.sublocality)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sublocality_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_sublocality(
    std::string* sublocality) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sublocality != nullptr) {
    
  } else {
    
  }
  sublocality_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sublocality, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.sublocality)
}

// repeated string address_lines = 9;
inline int PostalAddress::_internal_address_lines_size() const {
  return address_lines_.size();
}
inline int PostalAddress::address_lines_size() const {
  return _internal_address_lines_size();
}
inline void PostalAddress::clear_address_lines() {
  address_lines_.Clear();
}
inline std::string* PostalAddress::add_address_lines() {
  // @@protoc_insertion_point(field_add_mutable:idpass.PostalAddress.address_lines)
  return _internal_add_address_lines();
}
inline const std::string& PostalAddress::_internal_address_lines(int index) const {
  return address_lines_.Get(index);
}
inline const std::string& PostalAddress::address_lines(int index) const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.address_lines)
  return _internal_address_lines(index);
}
inline std::string* PostalAddress::mutable_address_lines(int index) {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.address_lines)
  return address_lines_.Mutable(index);
}
inline void PostalAddress::set_address_lines(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.address_lines)
  address_lines_.Mutable(index)->assign(value);
}
inline void PostalAddress::set_address_lines(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.address_lines)
  address_lines_.Mutable(index)->assign(std::move(value));
}
inline void PostalAddress::set_address_lines(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_lines_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.address_lines)
}
inline void PostalAddress::set_address_lines(int index, const char* value, size_t size) {
  address_lines_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.address_lines)
}
inline std::string* PostalAddress::_internal_add_address_lines() {
  return address_lines_.Add();
}
inline void PostalAddress::add_address_lines(const std::string& value) {
  address_lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:idpass.PostalAddress.address_lines)
}
inline void PostalAddress::add_address_lines(std::string&& value) {
  address_lines_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:idpass.PostalAddress.address_lines)
}
inline void PostalAddress::add_address_lines(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  address_lines_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:idpass.PostalAddress.address_lines)
}
inline void PostalAddress::add_address_lines(const char* value, size_t size) {
  address_lines_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:idpass.PostalAddress.address_lines)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostalAddress::address_lines() const {
  // @@protoc_insertion_point(field_list:idpass.PostalAddress.address_lines)
  return address_lines_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostalAddress::mutable_address_lines() {
  // @@protoc_insertion_point(field_mutable_list:idpass.PostalAddress.address_lines)
  return &address_lines_;
}

// repeated string recipients = 10;
inline int PostalAddress::_internal_recipients_size() const {
  return recipients_.size();
}
inline int PostalAddress::recipients_size() const {
  return _internal_recipients_size();
}
inline void PostalAddress::clear_recipients() {
  recipients_.Clear();
}
inline std::string* PostalAddress::add_recipients() {
  // @@protoc_insertion_point(field_add_mutable:idpass.PostalAddress.recipients)
  return _internal_add_recipients();
}
inline const std::string& PostalAddress::_internal_recipients(int index) const {
  return recipients_.Get(index);
}
inline const std::string& PostalAddress::recipients(int index) const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.recipients)
  return _internal_recipients(index);
}
inline std::string* PostalAddress::mutable_recipients(int index) {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.recipients)
  return recipients_.Mutable(index);
}
inline void PostalAddress::set_recipients(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.recipients)
  recipients_.Mutable(index)->assign(value);
}
inline void PostalAddress::set_recipients(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.recipients)
  recipients_.Mutable(index)->assign(std::move(value));
}
inline void PostalAddress::set_recipients(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.recipients)
}
inline void PostalAddress::set_recipients(int index, const char* value, size_t size) {
  recipients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.recipients)
}
inline std::string* PostalAddress::_internal_add_recipients() {
  return recipients_.Add();
}
inline void PostalAddress::add_recipients(const std::string& value) {
  recipients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:idpass.PostalAddress.recipients)
}
inline void PostalAddress::add_recipients(std::string&& value) {
  recipients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:idpass.PostalAddress.recipients)
}
inline void PostalAddress::add_recipients(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:idpass.PostalAddress.recipients)
}
inline void PostalAddress::add_recipients(const char* value, size_t size) {
  recipients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:idpass.PostalAddress.recipients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PostalAddress::recipients() const {
  // @@protoc_insertion_point(field_list:idpass.PostalAddress.recipients)
  return recipients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PostalAddress::mutable_recipients() {
  // @@protoc_insertion_point(field_mutable_list:idpass.PostalAddress.recipients)
  return &recipients_;
}

// string organization = 11;
inline void PostalAddress::clear_organization() {
  organization_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PostalAddress::organization() const {
  // @@protoc_insertion_point(field_get:idpass.PostalAddress.organization)
  return _internal_organization();
}
inline void PostalAddress::set_organization(const std::string& value) {
  _internal_set_organization(value);
  // @@protoc_insertion_point(field_set:idpass.PostalAddress.organization)
}
inline std::string* PostalAddress::mutable_organization() {
  // @@protoc_insertion_point(field_mutable:idpass.PostalAddress.organization)
  return _internal_mutable_organization();
}
inline const std::string& PostalAddress::_internal_organization() const {
  return organization_.Get();
}
inline void PostalAddress::_internal_set_organization(const std::string& value) {
  
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PostalAddress::set_organization(std::string&& value) {
  
  organization_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.PostalAddress.organization)
}
inline void PostalAddress::set_organization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.PostalAddress.organization)
}
inline void PostalAddress::set_organization(const char* value,
    size_t size) {
  
  organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.PostalAddress.organization)
}
inline std::string* PostalAddress::_internal_mutable_organization() {
  
  return organization_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PostalAddress::release_organization() {
  // @@protoc_insertion_point(field_release:idpass.PostalAddress.organization)
  return organization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PostalAddress::set_allocated_organization(std::string* organization) {
  if (organization != nullptr) {
    
  } else {
    
  }
  organization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.PostalAddress.organization)
}
inline std::string* PostalAddress::unsafe_arena_release_organization() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.PostalAddress.organization)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return organization_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PostalAddress::unsafe_arena_set_allocated_organization(
    std::string* organization) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (organization != nullptr) {
    
  } else {
    
  }
  organization_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      organization, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PostalAddress.organization)
}

// -------------------------------------------------------------------

// CardDetails

// string UIN = 9;
inline void CardDetails::clear_uin() {
  uin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardDetails::uin() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.UIN)
  return _internal_uin();
}
inline void CardDetails::set_uin(const std::string& value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.UIN)
}
inline std::string* CardDetails::mutable_uin() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.UIN)
  return _internal_mutable_uin();
}
inline const std::string& CardDetails::_internal_uin() const {
  return uin_.Get();
}
inline void CardDetails::_internal_set_uin(const std::string& value) {
  
  uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardDetails::set_uin(std::string&& value) {
  
  uin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardDetails.UIN)
}
inline void CardDetails::set_uin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardDetails.UIN)
}
inline void CardDetails::set_uin(const char* value,
    size_t size) {
  
  uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardDetails.UIN)
}
inline std::string* CardDetails::_internal_mutable_uin() {
  
  return uin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardDetails::release_uin() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.UIN)
  return uin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardDetails::set_allocated_uin(std::string* uin) {
  if (uin != nullptr) {
    
  } else {
    
  }
  uin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.UIN)
}
inline std::string* CardDetails::unsafe_arena_release_uin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardDetails.UIN)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uin_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardDetails::unsafe_arena_set_allocated_uin(
    std::string* uin) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uin != nullptr) {
    
  } else {
    
  }
  uin_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uin, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.UIN)
}

// string fullName = 8;
inline void CardDetails::clear_fullname() {
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardDetails::fullname() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.fullName)
  return _internal_fullname();
}
inline void CardDetails::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.fullName)
}
inline std::string* CardDetails::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.fullName)
  return _internal_mutable_fullname();
}
inline const std::string& CardDetails::_internal_fullname() const {
  return fullname_.Get();
}
inline void CardDetails::_internal_set_fullname(const std::string& value) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardDetails::set_fullname(std::string&& value) {
  
  fullname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardDetails.fullName)
}
inline void CardDetails::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardDetails.fullName)
}
inline void CardDetails::set_fullname(const char* value,
    size_t size) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardDetails.fullName)
}
inline std::string* CardDetails::_internal_mutable_fullname() {
  
  return fullname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardDetails::release_fullname() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.fullName)
  return fullname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardDetails::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.fullName)
}
inline std::string* CardDetails::unsafe_arena_release_fullname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardDetails.fullName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fullname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardDetails::unsafe_arena_set_allocated_fullname(
    std::string* fullname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fullname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.fullName)
}

// string surName = 1;
inline void CardDetails::clear_surname() {
  surname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardDetails::surname() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.surName)
  return _internal_surname();
}
inline void CardDetails::set_surname(const std::string& value) {
  _internal_set_surname(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.surName)
}
inline std::string* CardDetails::mutable_surname() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.surName)
  return _internal_mutable_surname();
}
inline const std::string& CardDetails::_internal_surname() const {
  return surname_.Get();
}
inline void CardDetails::_internal_set_surname(const std::string& value) {
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardDetails::set_surname(std::string&& value) {
  
  surname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardDetails.surName)
}
inline void CardDetails::set_surname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardDetails.surName)
}
inline void CardDetails::set_surname(const char* value,
    size_t size) {
  
  surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardDetails.surName)
}
inline std::string* CardDetails::_internal_mutable_surname() {
  
  return surname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardDetails::release_surname() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.surName)
  return surname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardDetails::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.surName)
}
inline std::string* CardDetails::unsafe_arena_release_surname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardDetails.surName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return surname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardDetails::unsafe_arena_set_allocated_surname(
    std::string* surname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      surname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.surName)
}

// string givenName = 2;
inline void CardDetails::clear_givenname() {
  givenname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardDetails::givenname() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.givenName)
  return _internal_givenname();
}
inline void CardDetails::set_givenname(const std::string& value) {
  _internal_set_givenname(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.givenName)
}
inline std::string* CardDetails::mutable_givenname() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.givenName)
  return _internal_mutable_givenname();
}
inline const std::string& CardDetails::_internal_givenname() const {
  return givenname_.Get();
}
inline void CardDetails::_internal_set_givenname(const std::string& value) {
  
  givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardDetails::set_givenname(std::string&& value) {
  
  givenname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardDetails.givenName)
}
inline void CardDetails::set_givenname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardDetails.givenName)
}
inline void CardDetails::set_givenname(const char* value,
    size_t size) {
  
  givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardDetails.givenName)
}
inline std::string* CardDetails::_internal_mutable_givenname() {
  
  return givenname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardDetails::release_givenname() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.givenName)
  return givenname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardDetails::set_allocated_givenname(std::string* givenname) {
  if (givenname != nullptr) {
    
  } else {
    
  }
  givenname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), givenname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.givenName)
}
inline std::string* CardDetails::unsafe_arena_release_givenname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardDetails.givenName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return givenname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardDetails::unsafe_arena_set_allocated_givenname(
    std::string* givenname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (givenname != nullptr) {
    
  } else {
    
  }
  givenname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      givenname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.givenName)
}

// string placeOfBirth = 3;
inline void CardDetails::clear_placeofbirth() {
  placeofbirth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CardDetails::placeofbirth() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.placeOfBirth)
  return _internal_placeofbirth();
}
inline void CardDetails::set_placeofbirth(const std::string& value) {
  _internal_set_placeofbirth(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.placeOfBirth)
}
inline std::string* CardDetails::mutable_placeofbirth() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.placeOfBirth)
  return _internal_mutable_placeofbirth();
}
inline const std::string& CardDetails::_internal_placeofbirth() const {
  return placeofbirth_.Get();
}
inline void CardDetails::_internal_set_placeofbirth(const std::string& value) {
  
  placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CardDetails::set_placeofbirth(std::string&& value) {
  
  placeofbirth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.CardDetails.placeOfBirth)
}
inline void CardDetails::set_placeofbirth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.CardDetails.placeOfBirth)
}
inline void CardDetails::set_placeofbirth(const char* value,
    size_t size) {
  
  placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.CardDetails.placeOfBirth)
}
inline std::string* CardDetails::_internal_mutable_placeofbirth() {
  
  return placeofbirth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CardDetails::release_placeofbirth() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.placeOfBirth)
  return placeofbirth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CardDetails::set_allocated_placeofbirth(std::string* placeofbirth) {
  if (placeofbirth != nullptr) {
    
  } else {
    
  }
  placeofbirth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), placeofbirth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.placeOfBirth)
}
inline std::string* CardDetails::unsafe_arena_release_placeofbirth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.CardDetails.placeOfBirth)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return placeofbirth_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CardDetails::unsafe_arena_set_allocated_placeofbirth(
    std::string* placeofbirth) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (placeofbirth != nullptr) {
    
  } else {
    
  }
  placeofbirth_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      placeofbirth, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.placeOfBirth)
}

// .idpass.Date dateOfBirth = 4;
inline bool CardDetails::_internal_has_dateofbirth() const {
  return this != internal_default_instance() && dateofbirth_ != nullptr;
}
inline bool CardDetails::has_dateofbirth() const {
  return _internal_has_dateofbirth();
}
inline void CardDetails::clear_dateofbirth() {
  if (GetArena() == nullptr && dateofbirth_ != nullptr) {
    delete dateofbirth_;
  }
  dateofbirth_ = nullptr;
}
inline const ::idpass::Date& CardDetails::_internal_dateofbirth() const {
  const ::idpass::Date* p = dateofbirth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::Date*>(
      &::idpass::_Date_default_instance_);
}
inline const ::idpass::Date& CardDetails::dateofbirth() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.dateOfBirth)
  return _internal_dateofbirth();
}
inline void CardDetails::unsafe_arena_set_allocated_dateofbirth(
    ::idpass::Date* dateofbirth) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dateofbirth_);
  }
  dateofbirth_ = dateofbirth;
  if (dateofbirth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.dateOfBirth)
}
inline ::idpass::Date* CardDetails::release_dateofbirth() {
  auto temp = unsafe_arena_release_dateofbirth();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::Date* CardDetails::unsafe_arena_release_dateofbirth() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.dateOfBirth)
  
  ::idpass::Date* temp = dateofbirth_;
  dateofbirth_ = nullptr;
  return temp;
}
inline ::idpass::Date* CardDetails::_internal_mutable_dateofbirth() {
  
  if (dateofbirth_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::Date>(GetArena());
    dateofbirth_ = p;
  }
  return dateofbirth_;
}
inline ::idpass::Date* CardDetails::mutable_dateofbirth() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.dateOfBirth)
  return _internal_mutable_dateofbirth();
}
inline void CardDetails::set_allocated_dateofbirth(::idpass::Date* dateofbirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dateofbirth_;
  }
  if (dateofbirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dateofbirth);
    if (message_arena != submessage_arena) {
      dateofbirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dateofbirth, submessage_arena);
    }
    
  } else {
    
  }
  dateofbirth_ = dateofbirth;
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.dateOfBirth)
}

// int32 gender = 7;
inline void CardDetails::clear_gender() {
  gender_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardDetails::_internal_gender() const {
  return gender_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CardDetails::gender() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.gender)
  return _internal_gender();
}
inline void CardDetails::_internal_set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gender_ = value;
}
inline void CardDetails::set_gender(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.gender)
}

// .idpass.PostalAddress postalAddress = 10;
inline bool CardDetails::_internal_has_postaladdress() const {
  return this != internal_default_instance() && postaladdress_ != nullptr;
}
inline bool CardDetails::has_postaladdress() const {
  return _internal_has_postaladdress();
}
inline void CardDetails::clear_postaladdress() {
  if (GetArena() == nullptr && postaladdress_ != nullptr) {
    delete postaladdress_;
  }
  postaladdress_ = nullptr;
}
inline const ::idpass::PostalAddress& CardDetails::_internal_postaladdress() const {
  const ::idpass::PostalAddress* p = postaladdress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::PostalAddress*>(
      &::idpass::_PostalAddress_default_instance_);
}
inline const ::idpass::PostalAddress& CardDetails::postaladdress() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.postalAddress)
  return _internal_postaladdress();
}
inline void CardDetails::unsafe_arena_set_allocated_postaladdress(
    ::idpass::PostalAddress* postaladdress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postaladdress_);
  }
  postaladdress_ = postaladdress;
  if (postaladdress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.CardDetails.postalAddress)
}
inline ::idpass::PostalAddress* CardDetails::release_postaladdress() {
  auto temp = unsafe_arena_release_postaladdress();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::PostalAddress* CardDetails::unsafe_arena_release_postaladdress() {
  // @@protoc_insertion_point(field_release:idpass.CardDetails.postalAddress)
  
  ::idpass::PostalAddress* temp = postaladdress_;
  postaladdress_ = nullptr;
  return temp;
}
inline ::idpass::PostalAddress* CardDetails::_internal_mutable_postaladdress() {
  
  if (postaladdress_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::PostalAddress>(GetArena());
    postaladdress_ = p;
  }
  return postaladdress_;
}
inline ::idpass::PostalAddress* CardDetails::mutable_postaladdress() {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.postalAddress)
  return _internal_mutable_postaladdress();
}
inline void CardDetails::set_allocated_postaladdress(::idpass::PostalAddress* postaladdress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete postaladdress_;
  }
  if (postaladdress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(postaladdress);
    if (message_arena != submessage_arena) {
      postaladdress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postaladdress, submessage_arena);
    }
    
  } else {
    
  }
  postaladdress_ = postaladdress;
  // @@protoc_insertion_point(field_set_allocated:idpass.CardDetails.postalAddress)
}

// repeated .idpass.Pair extra = 5;
inline int CardDetails::_internal_extra_size() const {
  return extra_.size();
}
inline int CardDetails::extra_size() const {
  return _internal_extra_size();
}
inline void CardDetails::clear_extra() {
  extra_.Clear();
}
inline ::idpass::Pair* CardDetails::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:idpass.CardDetails.extra)
  return extra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >*
CardDetails::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:idpass.CardDetails.extra)
  return &extra_;
}
inline const ::idpass::Pair& CardDetails::_internal_extra(int index) const {
  return extra_.Get(index);
}
inline const ::idpass::Pair& CardDetails::extra(int index) const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.extra)
  return _internal_extra(index);
}
inline ::idpass::Pair* CardDetails::_internal_add_extra() {
  return extra_.Add();
}
inline ::idpass::Pair* CardDetails::add_extra() {
  // @@protoc_insertion_point(field_add:idpass.CardDetails.extra)
  return _internal_add_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Pair >&
CardDetails::extra() const {
  // @@protoc_insertion_point(field_list:idpass.CardDetails.extra)
  return extra_;
}

// int64 createdAt = 6;
inline void CardDetails::clear_createdat() {
  createdat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CardDetails::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CardDetails::createdat() const {
  // @@protoc_insertion_point(field_get:idpass.CardDetails.createdAt)
  return _internal_createdat();
}
inline void CardDetails::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  createdat_ = value;
}
inline void CardDetails::set_createdat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:idpass.CardDetails.createdAt)
}

// -------------------------------------------------------------------

// IDPassCard

// .idpass.CardAccess access = 1;
inline bool IDPassCard::_internal_has_access() const {
  return this != internal_default_instance() && access_ != nullptr;
}
inline bool IDPassCard::has_access() const {
  return _internal_has_access();
}
inline void IDPassCard::clear_access() {
  if (GetArena() == nullptr && access_ != nullptr) {
    delete access_;
  }
  access_ = nullptr;
}
inline const ::idpass::CardAccess& IDPassCard::_internal_access() const {
  const ::idpass::CardAccess* p = access_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::CardAccess*>(
      &::idpass::_CardAccess_default_instance_);
}
inline const ::idpass::CardAccess& IDPassCard::access() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCard.access)
  return _internal_access();
}
inline void IDPassCard::unsafe_arena_set_allocated_access(
    ::idpass::CardAccess* access) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_);
  }
  access_ = access;
  if (access) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCard.access)
}
inline ::idpass::CardAccess* IDPassCard::release_access() {
  auto temp = unsafe_arena_release_access();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::CardAccess* IDPassCard::unsafe_arena_release_access() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCard.access)
  
  ::idpass::CardAccess* temp = access_;
  access_ = nullptr;
  return temp;
}
inline ::idpass::CardAccess* IDPassCard::_internal_mutable_access() {
  
  if (access_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::CardAccess>(GetArena());
    access_ = p;
  }
  return access_;
}
inline ::idpass::CardAccess* IDPassCard::mutable_access() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCard.access)
  return _internal_mutable_access();
}
inline void IDPassCard::set_allocated_access(::idpass::CardAccess* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete access_;
  }
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(access);
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCard.access)
}

// .idpass.CardDetails details = 2;
inline bool IDPassCard::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool IDPassCard::has_details() const {
  return _internal_has_details();
}
inline void IDPassCard::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::idpass::CardDetails& IDPassCard::_internal_details() const {
  const ::idpass::CardDetails* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::CardDetails*>(
      &::idpass::_CardDetails_default_instance_);
}
inline const ::idpass::CardDetails& IDPassCard::details() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCard.details)
  return _internal_details();
}
inline void IDPassCard::unsafe_arena_set_allocated_details(
    ::idpass::CardDetails* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCard.details)
}
inline ::idpass::CardDetails* IDPassCard::release_details() {
  auto temp = unsafe_arena_release_details();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::CardDetails* IDPassCard::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCard.details)
  
  ::idpass::CardDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::idpass::CardDetails* IDPassCard::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::CardDetails>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::idpass::CardDetails* IDPassCard::mutable_details() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCard.details)
  return _internal_mutable_details();
}
inline void IDPassCard::set_allocated_details(::idpass::CardDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCard.details)
}

// bytes encryptionKey = 3;
inline void IDPassCard::clear_encryptionkey() {
  encryptionkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IDPassCard::encryptionkey() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCard.encryptionKey)
  return _internal_encryptionkey();
}
inline void IDPassCard::set_encryptionkey(const std::string& value) {
  _internal_set_encryptionkey(value);
  // @@protoc_insertion_point(field_set:idpass.IDPassCard.encryptionKey)
}
inline std::string* IDPassCard::mutable_encryptionkey() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCard.encryptionKey)
  return _internal_mutable_encryptionkey();
}
inline const std::string& IDPassCard::_internal_encryptionkey() const {
  return encryptionkey_.Get();
}
inline void IDPassCard::_internal_set_encryptionkey(const std::string& value) {
  
  encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IDPassCard::set_encryptionkey(std::string&& value) {
  
  encryptionkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.IDPassCard.encryptionKey)
}
inline void IDPassCard::set_encryptionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.IDPassCard.encryptionKey)
}
inline void IDPassCard::set_encryptionkey(const void* value,
    size_t size) {
  
  encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.IDPassCard.encryptionKey)
}
inline std::string* IDPassCard::_internal_mutable_encryptionkey() {
  
  return encryptionkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IDPassCard::release_encryptionkey() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCard.encryptionKey)
  return encryptionkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDPassCard::set_allocated_encryptionkey(std::string* encryptionkey) {
  if (encryptionkey != nullptr) {
    
  } else {
    
  }
  encryptionkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryptionkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCard.encryptionKey)
}
inline std::string* IDPassCard::unsafe_arena_release_encryptionkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.IDPassCard.encryptionKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encryptionkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IDPassCard::unsafe_arena_set_allocated_encryptionkey(
    std::string* encryptionkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encryptionkey != nullptr) {
    
  } else {
    
  }
  encryptionkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encryptionkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCard.encryptionKey)
}

// -------------------------------------------------------------------

// SignedIDPassCard

// .idpass.IDPassCard card = 1;
inline bool SignedIDPassCard::_internal_has_card() const {
  return this != internal_default_instance() && card_ != nullptr;
}
inline bool SignedIDPassCard::has_card() const {
  return _internal_has_card();
}
inline void SignedIDPassCard::clear_card() {
  if (GetArena() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
}
inline const ::idpass::IDPassCard& SignedIDPassCard::_internal_card() const {
  const ::idpass::IDPassCard* p = card_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::IDPassCard*>(
      &::idpass::_IDPassCard_default_instance_);
}
inline const ::idpass::IDPassCard& SignedIDPassCard::card() const {
  // @@protoc_insertion_point(field_get:idpass.SignedIDPassCard.card)
  return _internal_card();
}
inline void SignedIDPassCard::unsafe_arena_set_allocated_card(
    ::idpass::IDPassCard* card) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.SignedIDPassCard.card)
}
inline ::idpass::IDPassCard* SignedIDPassCard::release_card() {
  auto temp = unsafe_arena_release_card();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::IDPassCard* SignedIDPassCard::unsafe_arena_release_card() {
  // @@protoc_insertion_point(field_release:idpass.SignedIDPassCard.card)
  
  ::idpass::IDPassCard* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::idpass::IDPassCard* SignedIDPassCard::_internal_mutable_card() {
  
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::IDPassCard>(GetArena());
    card_ = p;
  }
  return card_;
}
inline ::idpass::IDPassCard* SignedIDPassCard::mutable_card() {
  // @@protoc_insertion_point(field_mutable:idpass.SignedIDPassCard.card)
  return _internal_mutable_card();
}
inline void SignedIDPassCard::set_allocated_card(::idpass::IDPassCard* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete card_;
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    
  } else {
    
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:idpass.SignedIDPassCard.card)
}

// -------------------------------------------------------------------

// PublicSignedIDPassCard

// .idpass.CardDetails details = 1;
inline bool PublicSignedIDPassCard::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool PublicSignedIDPassCard::has_details() const {
  return _internal_has_details();
}
inline void PublicSignedIDPassCard::clear_details() {
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
}
inline const ::idpass::CardDetails& PublicSignedIDPassCard::_internal_details() const {
  const ::idpass::CardDetails* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::CardDetails*>(
      &::idpass::_CardDetails_default_instance_);
}
inline const ::idpass::CardDetails& PublicSignedIDPassCard::details() const {
  // @@protoc_insertion_point(field_get:idpass.PublicSignedIDPassCard.details)
  return _internal_details();
}
inline void PublicSignedIDPassCard::unsafe_arena_set_allocated_details(
    ::idpass::CardDetails* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.PublicSignedIDPassCard.details)
}
inline ::idpass::CardDetails* PublicSignedIDPassCard::release_details() {
  auto temp = unsafe_arena_release_details();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::CardDetails* PublicSignedIDPassCard::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:idpass.PublicSignedIDPassCard.details)
  
  ::idpass::CardDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::idpass::CardDetails* PublicSignedIDPassCard::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::CardDetails>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::idpass::CardDetails* PublicSignedIDPassCard::mutable_details() {
  // @@protoc_insertion_point(field_mutable:idpass.PublicSignedIDPassCard.details)
  return _internal_mutable_details();
}
inline void PublicSignedIDPassCard::set_allocated_details(::idpass::CardDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:idpass.PublicSignedIDPassCard.details)
}

// -------------------------------------------------------------------

// Certificate

// bytes pubkey = 1;
inline void Certificate::clear_pubkey() {
  pubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Certificate::pubkey() const {
  // @@protoc_insertion_point(field_get:idpass.Certificate.pubkey)
  return _internal_pubkey();
}
inline void Certificate::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:idpass.Certificate.pubkey)
}
inline std::string* Certificate::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:idpass.Certificate.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& Certificate::_internal_pubkey() const {
  return pubkey_.Get();
}
inline void Certificate::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Certificate::set_pubkey(std::string&& value) {
  
  pubkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.Certificate.pubkey)
}
inline void Certificate::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.Certificate.pubkey)
}
inline void Certificate::set_pubkey(const void* value,
    size_t size) {
  
  pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.Certificate.pubkey)
}
inline std::string* Certificate::_internal_mutable_pubkey() {
  
  return pubkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Certificate::release_pubkey() {
  // @@protoc_insertion_point(field_release:idpass.Certificate.pubkey)
  return pubkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Certificate::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.Certificate.pubkey)
}
inline std::string* Certificate::unsafe_arena_release_pubkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.Certificate.pubkey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pubkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Certificate::unsafe_arena_set_allocated_pubkey(
    std::string* pubkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pubkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.Certificate.pubkey)
}

// bytes issuerkey = 2;
inline void Certificate::clear_issuerkey() {
  issuerkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Certificate::issuerkey() const {
  // @@protoc_insertion_point(field_get:idpass.Certificate.issuerkey)
  return _internal_issuerkey();
}
inline void Certificate::set_issuerkey(const std::string& value) {
  _internal_set_issuerkey(value);
  // @@protoc_insertion_point(field_set:idpass.Certificate.issuerkey)
}
inline std::string* Certificate::mutable_issuerkey() {
  // @@protoc_insertion_point(field_mutable:idpass.Certificate.issuerkey)
  return _internal_mutable_issuerkey();
}
inline const std::string& Certificate::_internal_issuerkey() const {
  return issuerkey_.Get();
}
inline void Certificate::_internal_set_issuerkey(const std::string& value) {
  
  issuerkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Certificate::set_issuerkey(std::string&& value) {
  
  issuerkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.Certificate.issuerkey)
}
inline void Certificate::set_issuerkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuerkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.Certificate.issuerkey)
}
inline void Certificate::set_issuerkey(const void* value,
    size_t size) {
  
  issuerkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.Certificate.issuerkey)
}
inline std::string* Certificate::_internal_mutable_issuerkey() {
  
  return issuerkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Certificate::release_issuerkey() {
  // @@protoc_insertion_point(field_release:idpass.Certificate.issuerkey)
  return issuerkey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Certificate::set_allocated_issuerkey(std::string* issuerkey) {
  if (issuerkey != nullptr) {
    
  } else {
    
  }
  issuerkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuerkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.Certificate.issuerkey)
}
inline std::string* Certificate::unsafe_arena_release_issuerkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.Certificate.issuerkey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return issuerkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Certificate::unsafe_arena_set_allocated_issuerkey(
    std::string* issuerkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (issuerkey != nullptr) {
    
  } else {
    
  }
  issuerkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      issuerkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.Certificate.issuerkey)
}

// bytes signature = 3;
inline void Certificate::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Certificate::signature() const {
  // @@protoc_insertion_point(field_get:idpass.Certificate.signature)
  return _internal_signature();
}
inline void Certificate::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:idpass.Certificate.signature)
}
inline std::string* Certificate::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:idpass.Certificate.signature)
  return _internal_mutable_signature();
}
inline const std::string& Certificate::_internal_signature() const {
  return signature_.Get();
}
inline void Certificate::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Certificate::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.Certificate.signature)
}
inline void Certificate::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.Certificate.signature)
}
inline void Certificate::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.Certificate.signature)
}
inline std::string* Certificate::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Certificate::release_signature() {
  // @@protoc_insertion_point(field_release:idpass.Certificate.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Certificate::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.Certificate.signature)
}
inline std::string* Certificate::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.Certificate.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Certificate::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.Certificate.signature)
}

// -------------------------------------------------------------------

// IDPassCards

// .idpass.PublicSignedIDPassCard publicCard = 1;
inline bool IDPassCards::_internal_has_publiccard() const {
  return this != internal_default_instance() && publiccard_ != nullptr;
}
inline bool IDPassCards::has_publiccard() const {
  return _internal_has_publiccard();
}
inline void IDPassCards::clear_publiccard() {
  if (GetArena() == nullptr && publiccard_ != nullptr) {
    delete publiccard_;
  }
  publiccard_ = nullptr;
}
inline const ::idpass::PublicSignedIDPassCard& IDPassCards::_internal_publiccard() const {
  const ::idpass::PublicSignedIDPassCard* p = publiccard_;
  return p != nullptr ? *p : *reinterpret_cast<const ::idpass::PublicSignedIDPassCard*>(
      &::idpass::_PublicSignedIDPassCard_default_instance_);
}
inline const ::idpass::PublicSignedIDPassCard& IDPassCards::publiccard() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCards.publicCard)
  return _internal_publiccard();
}
inline void IDPassCards::unsafe_arena_set_allocated_publiccard(
    ::idpass::PublicSignedIDPassCard* publiccard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publiccard_);
  }
  publiccard_ = publiccard;
  if (publiccard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCards.publicCard)
}
inline ::idpass::PublicSignedIDPassCard* IDPassCards::release_publiccard() {
  auto temp = unsafe_arena_release_publiccard();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::idpass::PublicSignedIDPassCard* IDPassCards::unsafe_arena_release_publiccard() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCards.publicCard)
  
  ::idpass::PublicSignedIDPassCard* temp = publiccard_;
  publiccard_ = nullptr;
  return temp;
}
inline ::idpass::PublicSignedIDPassCard* IDPassCards::_internal_mutable_publiccard() {
  
  if (publiccard_ == nullptr) {
    auto* p = CreateMaybeMessage<::idpass::PublicSignedIDPassCard>(GetArena());
    publiccard_ = p;
  }
  return publiccard_;
}
inline ::idpass::PublicSignedIDPassCard* IDPassCards::mutable_publiccard() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCards.publicCard)
  return _internal_mutable_publiccard();
}
inline void IDPassCards::set_allocated_publiccard(::idpass::PublicSignedIDPassCard* publiccard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete publiccard_;
  }
  if (publiccard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(publiccard);
    if (message_arena != submessage_arena) {
      publiccard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publiccard, submessage_arena);
    }
    
  } else {
    
  }
  publiccard_ = publiccard;
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCards.publicCard)
}

// bytes encryptedCard = 2;
inline void IDPassCards::clear_encryptedcard() {
  encryptedcard_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IDPassCards::encryptedcard() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCards.encryptedCard)
  return _internal_encryptedcard();
}
inline void IDPassCards::set_encryptedcard(const std::string& value) {
  _internal_set_encryptedcard(value);
  // @@protoc_insertion_point(field_set:idpass.IDPassCards.encryptedCard)
}
inline std::string* IDPassCards::mutable_encryptedcard() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCards.encryptedCard)
  return _internal_mutable_encryptedcard();
}
inline const std::string& IDPassCards::_internal_encryptedcard() const {
  return encryptedcard_.Get();
}
inline void IDPassCards::_internal_set_encryptedcard(const std::string& value) {
  
  encryptedcard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IDPassCards::set_encryptedcard(std::string&& value) {
  
  encryptedcard_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.IDPassCards.encryptedCard)
}
inline void IDPassCards::set_encryptedcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encryptedcard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.IDPassCards.encryptedCard)
}
inline void IDPassCards::set_encryptedcard(const void* value,
    size_t size) {
  
  encryptedcard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.IDPassCards.encryptedCard)
}
inline std::string* IDPassCards::_internal_mutable_encryptedcard() {
  
  return encryptedcard_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IDPassCards::release_encryptedcard() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCards.encryptedCard)
  return encryptedcard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDPassCards::set_allocated_encryptedcard(std::string* encryptedcard) {
  if (encryptedcard != nullptr) {
    
  } else {
    
  }
  encryptedcard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryptedcard,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCards.encryptedCard)
}
inline std::string* IDPassCards::unsafe_arena_release_encryptedcard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.IDPassCards.encryptedCard)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encryptedcard_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IDPassCards::unsafe_arena_set_allocated_encryptedcard(
    std::string* encryptedcard) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encryptedcard != nullptr) {
    
  } else {
    
  }
  encryptedcard_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encryptedcard, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCards.encryptedCard)
}

// bytes signature = 3;
inline void IDPassCards::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IDPassCards::signature() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCards.signature)
  return _internal_signature();
}
inline void IDPassCards::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:idpass.IDPassCards.signature)
}
inline std::string* IDPassCards::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCards.signature)
  return _internal_mutable_signature();
}
inline const std::string& IDPassCards::_internal_signature() const {
  return signature_.Get();
}
inline void IDPassCards::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IDPassCards::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.IDPassCards.signature)
}
inline void IDPassCards::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.IDPassCards.signature)
}
inline void IDPassCards::set_signature(const void* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.IDPassCards.signature)
}
inline std::string* IDPassCards::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IDPassCards::release_signature() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCards.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDPassCards::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCards.signature)
}
inline std::string* IDPassCards::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.IDPassCards.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IDPassCards::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCards.signature)
}

// bytes signerPublicKey = 4;
inline void IDPassCards::clear_signerpublickey() {
  signerpublickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IDPassCards::signerpublickey() const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCards.signerPublicKey)
  return _internal_signerpublickey();
}
inline void IDPassCards::set_signerpublickey(const std::string& value) {
  _internal_set_signerpublickey(value);
  // @@protoc_insertion_point(field_set:idpass.IDPassCards.signerPublicKey)
}
inline std::string* IDPassCards::mutable_signerpublickey() {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCards.signerPublicKey)
  return _internal_mutable_signerpublickey();
}
inline const std::string& IDPassCards::_internal_signerpublickey() const {
  return signerpublickey_.Get();
}
inline void IDPassCards::_internal_set_signerpublickey(const std::string& value) {
  
  signerpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IDPassCards::set_signerpublickey(std::string&& value) {
  
  signerpublickey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:idpass.IDPassCards.signerPublicKey)
}
inline void IDPassCards::set_signerpublickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signerpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:idpass.IDPassCards.signerPublicKey)
}
inline void IDPassCards::set_signerpublickey(const void* value,
    size_t size) {
  
  signerpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:idpass.IDPassCards.signerPublicKey)
}
inline std::string* IDPassCards::_internal_mutable_signerpublickey() {
  
  return signerpublickey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IDPassCards::release_signerpublickey() {
  // @@protoc_insertion_point(field_release:idpass.IDPassCards.signerPublicKey)
  return signerpublickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDPassCards::set_allocated_signerpublickey(std::string* signerpublickey) {
  if (signerpublickey != nullptr) {
    
  } else {
    
  }
  signerpublickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signerpublickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:idpass.IDPassCards.signerPublicKey)
}
inline std::string* IDPassCards::unsafe_arena_release_signerpublickey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:idpass.IDPassCards.signerPublicKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signerpublickey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IDPassCards::unsafe_arena_set_allocated_signerpublickey(
    std::string* signerpublickey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signerpublickey != nullptr) {
    
  } else {
    
  }
  signerpublickey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signerpublickey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:idpass.IDPassCards.signerPublicKey)
}

// repeated .idpass.Certificate certificates = 5;
inline int IDPassCards::_internal_certificates_size() const {
  return certificates_.size();
}
inline int IDPassCards::certificates_size() const {
  return _internal_certificates_size();
}
inline void IDPassCards::clear_certificates() {
  certificates_.Clear();
}
inline ::idpass::Certificate* IDPassCards::mutable_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:idpass.IDPassCards.certificates)
  return certificates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >*
IDPassCards::mutable_certificates() {
  // @@protoc_insertion_point(field_mutable_list:idpass.IDPassCards.certificates)
  return &certificates_;
}
inline const ::idpass::Certificate& IDPassCards::_internal_certificates(int index) const {
  return certificates_.Get(index);
}
inline const ::idpass::Certificate& IDPassCards::certificates(int index) const {
  // @@protoc_insertion_point(field_get:idpass.IDPassCards.certificates)
  return _internal_certificates(index);
}
inline ::idpass::Certificate* IDPassCards::_internal_add_certificates() {
  return certificates_.Add();
}
inline ::idpass::Certificate* IDPassCards::add_certificates() {
  // @@protoc_insertion_point(field_add:idpass.IDPassCards.certificates)
  return _internal_add_certificates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::idpass::Certificate >&
IDPassCards::certificates() const {
  // @@protoc_insertion_point(field_list:idpass.IDPassCards.certificates)
  return certificates_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace idpass

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::idpass::CardAccess_FingerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idpass::CardAccess_FingerType>() {
  return ::idpass::CardAccess_FingerType_descriptor();
}
template <> struct is_proto_enum< ::idpass::CardAccess_EyeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::idpass::CardAccess_EyeType>() {
  return ::idpass::CardAccess_EyeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_idpasslite_2eproto
