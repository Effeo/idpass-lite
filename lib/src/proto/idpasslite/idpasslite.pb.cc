// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idpasslite.proto

#include "idpasslite.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardAccess_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CardDetails_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Certificate_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IDPassCard_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pair_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostalAddress_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicSignedIDPassCard_idpasslite_2eproto;
namespace idpass {
class DateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Date> _instance;
} _Date_default_instance_;
class PairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pair> _instance;
} _Pair_default_instance_;
class DictionaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dictionary> _instance;
} _Dictionary_default_instance_;
class CardAccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardAccess> _instance;
} _CardAccess_default_instance_;
class PostalAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostalAddress> _instance;
} _PostalAddress_default_instance_;
class CardDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CardDetails> _instance;
} _CardDetails_default_instance_;
class IDPassCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDPassCard> _instance;
} _IDPassCard_default_instance_;
class SignedIDPassCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignedIDPassCard> _instance;
} _SignedIDPassCard_default_instance_;
class PublicSignedIDPassCardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublicSignedIDPassCard> _instance;
} _PublicSignedIDPassCard_default_instance_;
class CertificateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Certificate> _instance;
} _Certificate_default_instance_;
class IDPassCardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDPassCards> _instance;
} _IDPassCards_default_instance_;
}  // namespace idpass
static void InitDefaultsscc_info_CardAccess_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_CardAccess_default_instance_;
    new (ptr) ::idpass::CardAccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::CardAccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CardAccess_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CardAccess_idpasslite_2eproto}, {}};

static void InitDefaultsscc_info_CardDetails_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_CardDetails_default_instance_;
    new (ptr) ::idpass::CardDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::CardDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CardDetails_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CardDetails_idpasslite_2eproto}, {
      &scc_info_Date_idpasslite_2eproto.base,
      &scc_info_PostalAddress_idpasslite_2eproto.base,
      &scc_info_Pair_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_Certificate_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_Certificate_default_instance_;
    new (ptr) ::idpass::Certificate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::Certificate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Certificate_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Certificate_idpasslite_2eproto}, {}};

static void InitDefaultsscc_info_Date_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_Date_default_instance_;
    new (ptr) ::idpass::Date();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::Date::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Date_idpasslite_2eproto}, {}};

static void InitDefaultsscc_info_Dictionary_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_Dictionary_default_instance_;
    new (ptr) ::idpass::Dictionary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::Dictionary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dictionary_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dictionary_idpasslite_2eproto}, {
      &scc_info_Pair_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_IDPassCard_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_IDPassCard_default_instance_;
    new (ptr) ::idpass::IDPassCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::IDPassCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IDPassCard_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IDPassCard_idpasslite_2eproto}, {
      &scc_info_CardAccess_idpasslite_2eproto.base,
      &scc_info_CardDetails_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_IDPassCards_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_IDPassCards_default_instance_;
    new (ptr) ::idpass::IDPassCards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::IDPassCards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IDPassCards_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IDPassCards_idpasslite_2eproto}, {
      &scc_info_PublicSignedIDPassCard_idpasslite_2eproto.base,
      &scc_info_Certificate_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_Pair_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_Pair_default_instance_;
    new (ptr) ::idpass::Pair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::Pair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pair_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pair_idpasslite_2eproto}, {}};

static void InitDefaultsscc_info_PostalAddress_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_PostalAddress_default_instance_;
    new (ptr) ::idpass::PostalAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::PostalAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostalAddress_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PostalAddress_idpasslite_2eproto}, {}};

static void InitDefaultsscc_info_PublicSignedIDPassCard_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_PublicSignedIDPassCard_default_instance_;
    new (ptr) ::idpass::PublicSignedIDPassCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::PublicSignedIDPassCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublicSignedIDPassCard_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublicSignedIDPassCard_idpasslite_2eproto}, {
      &scc_info_CardDetails_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_SignedIDPassCard_idpasslite_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::idpass::_SignedIDPassCard_default_instance_;
    new (ptr) ::idpass::SignedIDPassCard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::idpass::SignedIDPassCard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignedIDPassCard_idpasslite_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignedIDPassCard_idpasslite_2eproto}, {
      &scc_info_IDPassCard_idpasslite_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_idpasslite_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_idpasslite_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_idpasslite_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_idpasslite_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::Date, year_),
  PROTOBUF_FIELD_OFFSET(::idpass::Date, month_),
  PROTOBUF_FIELD_OFFSET(::idpass::Date, day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::Pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::Pair, key_),
  PROTOBUF_FIELD_OFFSET(::idpass::Pair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::Dictionary, pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, finger_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, fingerprint_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, eye_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, iris_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, face_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardAccess, pin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, revision_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, region_code_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, language_code_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, postal_code_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, sorting_code_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, administrative_area_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, locality_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, sublocality_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, address_lines_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, recipients_),
  PROTOBUF_FIELD_OFFSET(::idpass::PostalAddress, organization_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, uin_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, fullname_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, surname_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, givenname_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, placeofbirth_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, dateofbirth_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, gender_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, postaladdress_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, extra_),
  PROTOBUF_FIELD_OFFSET(::idpass::CardDetails, createdat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCard, access_),
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCard, details_),
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCard, encryptionkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::SignedIDPassCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::SignedIDPassCard, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::PublicSignedIDPassCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::PublicSignedIDPassCard, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::Certificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::Certificate, pubkey_),
  PROTOBUF_FIELD_OFFSET(::idpass::Certificate, issuerkey_),
  PROTOBUF_FIELD_OFFSET(::idpass::Certificate, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCards, publiccard_),
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCards, encryptedcard_),
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCards, signature_),
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCards, signerpublickey_),
  PROTOBUF_FIELD_OFFSET(::idpass::IDPassCards, certificates_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::idpass::Date)},
  { 8, -1, sizeof(::idpass::Pair)},
  { 15, -1, sizeof(::idpass::Dictionary)},
  { 21, -1, sizeof(::idpass::CardAccess)},
  { 32, -1, sizeof(::idpass::PostalAddress)},
  { 48, -1, sizeof(::idpass::CardDetails)},
  { 63, -1, sizeof(::idpass::IDPassCard)},
  { 71, -1, sizeof(::idpass::SignedIDPassCard)},
  { 77, -1, sizeof(::idpass::PublicSignedIDPassCard)},
  { 83, -1, sizeof(::idpass::Certificate)},
  { 91, -1, sizeof(::idpass::IDPassCards)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_Date_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_Pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_Dictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_CardAccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_PostalAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_CardDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_IDPassCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_SignedIDPassCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_PublicSignedIDPassCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_Certificate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idpass::_IDPassCards_default_instance_),
};

const char descriptor_table_protodef_idpasslite_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020idpasslite.proto\022\006idpass\"0\n\004Date\022\014\n\004ye"
  "ar\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003day\030\003 \001(\005\"\"\n\004"
  "Pair\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\")\n\nDict"
  "ionary\022\033\n\005pairs\030\001 \003(\0132\014.idpass.Pair\"\231\002\n\n"
  "CardAccess\022-\n\006finger\030\001 \001(\0162\035.idpass.Card"
  "Access.FingerType\022\023\n\013fingerprint\030\002 \001(\014\022\'"
  "\n\003eye\030\003 \001(\0162\032.idpass.CardAccess.EyeType\022"
  "\014\n\004iris\030\004 \001(\014\022\014\n\004face\030\005 \001(\014\022\013\n\003pin\030\006 \001(\t"
  "\"\\\n\nFingerType\022\006\n\002R1\020\000\022\006\n\002R2\020\001\022\006\n\002R3\020\002\022\006"
  "\n\002R4\020\003\022\006\n\002R5\020\004\022\006\n\002L1\020\005\022\006\n\002L2\020\006\022\006\n\002L3\020\007\022\006"
  "\n\002L4\020\010\022\006\n\002L5\020\t\"\027\n\007EyeType\022\005\n\001R\020\000\022\005\n\001L\020\001\""
  "\375\001\n\rPostalAddress\022\020\n\010revision\030\001 \001(\005\022\023\n\013r"
  "egion_code\030\002 \001(\t\022\025\n\rlanguage_code\030\003 \001(\t\022"
  "\023\n\013postal_code\030\004 \001(\t\022\024\n\014sorting_code\030\005 \001"
  "(\t\022\033\n\023administrative_area\030\006 \001(\t\022\020\n\010local"
  "ity\030\007 \001(\t\022\023\n\013sublocality\030\010 \001(\t\022\025\n\raddres"
  "s_lines\030\t \003(\t\022\022\n\nrecipients\030\n \003(\t\022\024\n\014org"
  "anization\030\013 \001(\t\"\367\001\n\013CardDetails\022\013\n\003UIN\030\t"
  " \001(\t\022\020\n\010fullName\030\010 \001(\t\022\017\n\007surName\030\001 \001(\t\022"
  "\021\n\tgivenName\030\002 \001(\t\022\024\n\014placeOfBirth\030\003 \001(\t"
  "\022!\n\013dateOfBirth\030\004 \001(\0132\014.idpass.Date\022\016\n\006g"
  "ender\030\007 \001(\005\022,\n\rpostalAddress\030\n \001(\0132\025.idp"
  "ass.PostalAddress\022\033\n\005extra\030\005 \003(\0132\014.idpas"
  "s.Pair\022\021\n\tcreatedAt\030\006 \001(\003\"m\n\nIDPassCard\022"
  "\"\n\006access\030\001 \001(\0132\022.idpass.CardAccess\022$\n\007d"
  "etails\030\002 \001(\0132\023.idpass.CardDetails\022\025\n\renc"
  "ryptionKey\030\003 \001(\014\"4\n\020SignedIDPassCard\022 \n\004"
  "card\030\001 \001(\0132\022.idpass.IDPassCard\">\n\026Public"
  "SignedIDPassCard\022$\n\007details\030\001 \001(\0132\023.idpa"
  "ss.CardDetails\"C\n\013Certificate\022\016\n\006pubkey\030"
  "\001 \001(\014\022\021\n\tissuerkey\030\002 \001(\014\022\021\n\tsignature\030\003 "
  "\001(\014\"\257\001\n\013IDPassCards\0222\n\npublicCard\030\001 \001(\0132"
  "\036.idpass.PublicSignedIDPassCard\022\025\n\rencry"
  "ptedCard\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\022\027\n\017sig"
  "nerPublicKey\030\004 \001(\014\022)\n\014certificates\030\005 \003(\013"
  "2\023.idpass.CertificateB\031\n\025org.idpass.lite"
  ".protoP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_idpasslite_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_idpasslite_2eproto_sccs[11] = {
  &scc_info_CardAccess_idpasslite_2eproto.base,
  &scc_info_CardDetails_idpasslite_2eproto.base,
  &scc_info_Certificate_idpasslite_2eproto.base,
  &scc_info_Date_idpasslite_2eproto.base,
  &scc_info_Dictionary_idpasslite_2eproto.base,
  &scc_info_IDPassCard_idpasslite_2eproto.base,
  &scc_info_IDPassCards_idpasslite_2eproto.base,
  &scc_info_Pair_idpasslite_2eproto.base,
  &scc_info_PostalAddress_idpasslite_2eproto.base,
  &scc_info_PublicSignedIDPassCard_idpasslite_2eproto.base,
  &scc_info_SignedIDPassCard_idpasslite_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_idpasslite_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_idpasslite_2eproto = {
  false, false, descriptor_table_protodef_idpasslite_2eproto, "idpasslite.proto", 1456,
  &descriptor_table_idpasslite_2eproto_once, descriptor_table_idpasslite_2eproto_sccs, descriptor_table_idpasslite_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_idpasslite_2eproto::offsets,
  file_level_metadata_idpasslite_2eproto, 11, file_level_enum_descriptors_idpasslite_2eproto, file_level_service_descriptors_idpasslite_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_idpasslite_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_idpasslite_2eproto)), true);
namespace idpass {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CardAccess_FingerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_idpasslite_2eproto);
  return file_level_enum_descriptors_idpasslite_2eproto[0];
}
bool CardAccess_FingerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CardAccess_FingerType CardAccess::R1;
constexpr CardAccess_FingerType CardAccess::R2;
constexpr CardAccess_FingerType CardAccess::R3;
constexpr CardAccess_FingerType CardAccess::R4;
constexpr CardAccess_FingerType CardAccess::R5;
constexpr CardAccess_FingerType CardAccess::L1;
constexpr CardAccess_FingerType CardAccess::L2;
constexpr CardAccess_FingerType CardAccess::L3;
constexpr CardAccess_FingerType CardAccess::L4;
constexpr CardAccess_FingerType CardAccess::L5;
constexpr CardAccess_FingerType CardAccess::FingerType_MIN;
constexpr CardAccess_FingerType CardAccess::FingerType_MAX;
constexpr int CardAccess::FingerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CardAccess_EyeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_idpasslite_2eproto);
  return file_level_enum_descriptors_idpasslite_2eproto[1];
}
bool CardAccess_EyeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CardAccess_EyeType CardAccess::R;
constexpr CardAccess_EyeType CardAccess::L;
constexpr CardAccess_EyeType CardAccess::EyeType_MIN;
constexpr CardAccess_EyeType CardAccess::EyeType_MAX;
constexpr int CardAccess::EyeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Date::InitAsDefaultInstance() {
}
class Date::_Internal {
 public:
};

Date::Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:idpass.Date)
}

void Date::SharedCtor() {
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:idpass.Date)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Date::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Date::ArenaDtor(void* object) {
  Date* _this = reinterpret_cast< Date* >(object);
  (void)_this;
}
void Date::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Date& Date::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Date_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Date::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.Date)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.Date)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2;
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3;
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.Date)
  GOOGLE_DCHECK_NE(&from, this);
  const Date* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Date>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.Date)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.Date)
    MergeFrom(*source);
  }
}

void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.Date)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
}

void Date::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date, day_)
      + sizeof(Date::day_)
      - PROTOBUF_FIELD_OFFSET(Date, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Date::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pair::InitAsDefaultInstance() {
}
class Pair::_Internal {
 public:
};

Pair::Pair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.Pair)
}
Pair::Pair(const Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:idpass.Pair)
}

void Pair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pair_idpasslite_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:idpass.Pair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pair::ArenaDtor(void* object) {
  Pair* _this = reinterpret_cast< Pair* >(object);
  (void)_this;
}
void Pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pair& Pair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pair_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.Pair.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.Pair.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.Pair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.Pair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.Pair)
  return target;
}

size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.Pair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  const Pair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.Pair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.Pair)
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void Pair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  return true;
}

void Pair::InternalSwap(Pair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Pair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dictionary::InitAsDefaultInstance() {
}
class Dictionary::_Internal {
 public:
};

Dictionary::Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pairs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.Dictionary)
}
Dictionary::Dictionary(const Dictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idpass.Dictionary)
}

void Dictionary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dictionary_idpasslite_2eproto.base);
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:idpass.Dictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Dictionary::ArenaDtor(void* object) {
  Dictionary* _this = reinterpret_cast< Dictionary* >(object);
  (void)_this;
}
void Dictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dictionary& Dictionary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dictionary_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .idpass.Pair pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idpass.Pair pairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.Dictionary)
  return target;
}

size_t Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.Dictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idpass.Pair pairs = 1;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const Dictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.Dictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.Dictionary)
    MergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
}

void Dictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dictionary::IsInitialized() const {
  return true;
}

void Dictionary::InternalSwap(Dictionary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pairs_.InternalSwap(&other->pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dictionary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CardAccess::InitAsDefaultInstance() {
}
class CardAccess::_Internal {
 public:
};

CardAccess::CardAccess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.CardAccess)
}
CardAccess::CardAccess(const CardAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fingerprint().empty()) {
    fingerprint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fingerprint(),
      GetArena());
  }
  iris_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_iris().empty()) {
    iris_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_iris(),
      GetArena());
  }
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_face().empty()) {
    face_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_face(),
      GetArena());
  }
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pin().empty()) {
    pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pin(),
      GetArena());
  }
  ::memcpy(&finger_, &from.finger_,
    static_cast<size_t>(reinterpret_cast<char*>(&eye_) -
    reinterpret_cast<char*>(&finger_)) + sizeof(eye_));
  // @@protoc_insertion_point(copy_constructor:idpass.CardAccess)
}

void CardAccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardAccess_idpasslite_2eproto.base);
  fingerprint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iris_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&finger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eye_) -
      reinterpret_cast<char*>(&finger_)) + sizeof(eye_));
}

CardAccess::~CardAccess() {
  // @@protoc_insertion_point(destructor:idpass.CardAccess)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardAccess::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fingerprint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iris_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  face_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CardAccess::ArenaDtor(void* object) {
  CardAccess* _this = reinterpret_cast< CardAccess* >(object);
  (void)_this;
}
void CardAccess::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardAccess& CardAccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardAccess_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void CardAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.CardAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fingerprint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iris_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&finger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eye_) -
      reinterpret_cast<char*>(&finger_)) + sizeof(eye_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardAccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idpass.CardAccess.FingerType finger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_finger(static_cast<::idpass::CardAccess_FingerType>(val));
        } else goto handle_unusual;
        continue;
      // bytes fingerprint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_fingerprint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .idpass.CardAccess.EyeType eye = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_eye(static_cast<::idpass::CardAccess_EyeType>(val));
        } else goto handle_unusual;
        continue;
      // bytes iris = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_iris();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes face = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_face();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.CardAccess.pin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardAccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.CardAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idpass.CardAccess.FingerType finger = 1;
  if (this->finger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_finger(), target);
  }

  // bytes fingerprint = 2;
  if (this->fingerprint().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_fingerprint(), target);
  }

  // .idpass.CardAccess.EyeType eye = 3;
  if (this->eye() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_eye(), target);
  }

  // bytes iris = 4;
  if (this->iris().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_iris(), target);
  }

  // bytes face = 5;
  if (this->face().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_face(), target);
  }

  // string pin = 6;
  if (this->pin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.CardAccess.pin");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.CardAccess)
  return target;
}

size_t CardAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.CardAccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes fingerprint = 2;
  if (this->fingerprint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fingerprint());
  }

  // bytes iris = 4;
  if (this->iris().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iris());
  }

  // bytes face = 5;
  if (this->face().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_face());
  }

  // string pin = 6;
  if (this->pin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }

  // .idpass.CardAccess.FingerType finger = 1;
  if (this->finger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_finger());
  }

  // .idpass.CardAccess.EyeType eye = 3;
  if (this->eye() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eye());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardAccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.CardAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const CardAccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardAccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.CardAccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.CardAccess)
    MergeFrom(*source);
  }
}

void CardAccess::MergeFrom(const CardAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.CardAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fingerprint().size() > 0) {
    _internal_set_fingerprint(from._internal_fingerprint());
  }
  if (from.iris().size() > 0) {
    _internal_set_iris(from._internal_iris());
  }
  if (from.face().size() > 0) {
    _internal_set_face(from._internal_face());
  }
  if (from.pin().size() > 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.finger() != 0) {
    _internal_set_finger(from._internal_finger());
  }
  if (from.eye() != 0) {
    _internal_set_eye(from._internal_eye());
  }
}

void CardAccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.CardAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardAccess::CopyFrom(const CardAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.CardAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardAccess::IsInitialized() const {
  return true;
}

void CardAccess::InternalSwap(CardAccess* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fingerprint_.Swap(&other->fingerprint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iris_.Swap(&other->iris_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  face_.Swap(&other->face_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pin_.Swap(&other->pin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardAccess, eye_)
      + sizeof(CardAccess::eye_)
      - PROTOBUF_FIELD_OFFSET(CardAccess, finger_)>(
          reinterpret_cast<char*>(&finger_),
          reinterpret_cast<char*>(&other->finger_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardAccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PostalAddress::InitAsDefaultInstance() {
}
class PostalAddress::_Internal {
 public:
};

PostalAddress::PostalAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  address_lines_(arena),
  recipients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.PostalAddress)
}
PostalAddress::PostalAddress(const PostalAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_lines_(from.address_lines_),
      recipients_(from.recipients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region_code().empty()) {
    region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region_code(),
      GetArena());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_code(),
      GetArena());
  }
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_postal_code().empty()) {
    postal_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_postal_code(),
      GetArena());
  }
  sorting_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sorting_code().empty()) {
    sorting_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sorting_code(),
      GetArena());
  }
  administrative_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_administrative_area().empty()) {
    administrative_area_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_administrative_area(),
      GetArena());
  }
  locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locality().empty()) {
    locality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_locality(),
      GetArena());
  }
  sublocality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sublocality().empty()) {
    sublocality_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sublocality(),
      GetArena());
  }
  organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization().empty()) {
    organization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_organization(),
      GetArena());
  }
  revision_ = from.revision_;
  // @@protoc_insertion_point(copy_constructor:idpass.PostalAddress)
}

void PostalAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostalAddress_idpasslite_2eproto.base);
  region_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sorting_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  administrative_area_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sublocality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revision_ = 0;
}

PostalAddress::~PostalAddress() {
  // @@protoc_insertion_point(destructor:idpass.PostalAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PostalAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  region_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sorting_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  administrative_area_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sublocality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PostalAddress::ArenaDtor(void* object) {
  PostalAddress* _this = reinterpret_cast< PostalAddress* >(object);
  (void)_this;
}
void PostalAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PostalAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostalAddress& PostalAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostalAddress_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void PostalAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.PostalAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_lines_.Clear();
  recipients_.Clear();
  region_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postal_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sorting_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  administrative_area_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sublocality_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  organization_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  revision_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PostalAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_region_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.region_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string postal_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_postal_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.postal_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sorting_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sorting_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.sorting_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string administrative_area = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_administrative_area();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.administrative_area"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_locality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.locality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sublocality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_sublocality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.sublocality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string address_lines = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address_lines();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.address_lines"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string recipients = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_recipients();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.recipients"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // string organization = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_organization();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.PostalAddress.organization"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PostalAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.PostalAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 revision = 1;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_revision(), target);
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_code().data(), static_cast<int>(this->_internal_region_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.region_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region_code(), target);
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.language_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language_code(), target);
  }

  // string postal_code = 4;
  if (this->postal_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_postal_code().data(), static_cast<int>(this->_internal_postal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.postal_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_postal_code(), target);
  }

  // string sorting_code = 5;
  if (this->sorting_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sorting_code().data(), static_cast<int>(this->_internal_sorting_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.sorting_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sorting_code(), target);
  }

  // string administrative_area = 6;
  if (this->administrative_area().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_administrative_area().data(), static_cast<int>(this->_internal_administrative_area().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.administrative_area");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_administrative_area(), target);
  }

  // string locality = 7;
  if (this->locality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locality().data(), static_cast<int>(this->_internal_locality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.locality");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_locality(), target);
  }

  // string sublocality = 8;
  if (this->sublocality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sublocality().data(), static_cast<int>(this->_internal_sublocality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.sublocality");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sublocality(), target);
  }

  // repeated string address_lines = 9;
  for (int i = 0, n = this->_internal_address_lines_size(); i < n; i++) {
    const auto& s = this->_internal_address_lines(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.address_lines");
    target = stream->WriteString(9, s, target);
  }

  // repeated string recipients = 10;
  for (int i = 0, n = this->_internal_recipients_size(); i < n; i++) {
    const auto& s = this->_internal_recipients(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.recipients");
    target = stream->WriteString(10, s, target);
  }

  // string organization = 11;
  if (this->organization().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization().data(), static_cast<int>(this->_internal_organization().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.PostalAddress.organization");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_organization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.PostalAddress)
  return target;
}

size_t PostalAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.PostalAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address_lines = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_lines_.size());
  for (int i = 0, n = address_lines_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_lines_.Get(i));
  }

  // repeated string recipients = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(recipients_.size());
  for (int i = 0, n = recipients_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      recipients_.Get(i));
  }

  // string region_code = 2;
  if (this->region_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_code());
  }

  // string language_code = 3;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string postal_code = 4;
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postal_code());
  }

  // string sorting_code = 5;
  if (this->sorting_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sorting_code());
  }

  // string administrative_area = 6;
  if (this->administrative_area().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_administrative_area());
  }

  // string locality = 7;
  if (this->locality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locality());
  }

  // string sublocality = 8;
  if (this->sublocality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sublocality());
  }

  // string organization = 11;
  if (this->organization().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization());
  }

  // int32 revision = 1;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostalAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.PostalAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const PostalAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PostalAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.PostalAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.PostalAddress)
    MergeFrom(*source);
  }
}

void PostalAddress::MergeFrom(const PostalAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.PostalAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_lines_.MergeFrom(from.address_lines_);
  recipients_.MergeFrom(from.recipients_);
  if (from.region_code().size() > 0) {
    _internal_set_region_code(from._internal_region_code());
  }
  if (from.language_code().size() > 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.postal_code().size() > 0) {
    _internal_set_postal_code(from._internal_postal_code());
  }
  if (from.sorting_code().size() > 0) {
    _internal_set_sorting_code(from._internal_sorting_code());
  }
  if (from.administrative_area().size() > 0) {
    _internal_set_administrative_area(from._internal_administrative_area());
  }
  if (from.locality().size() > 0) {
    _internal_set_locality(from._internal_locality());
  }
  if (from.sublocality().size() > 0) {
    _internal_set_sublocality(from._internal_sublocality());
  }
  if (from.organization().size() > 0) {
    _internal_set_organization(from._internal_organization());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
}

void PostalAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.PostalAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostalAddress::CopyFrom(const PostalAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.PostalAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostalAddress::IsInitialized() const {
  return true;
}

void PostalAddress::InternalSwap(PostalAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_lines_.InternalSwap(&other->address_lines_);
  recipients_.InternalSwap(&other->recipients_);
  region_code_.Swap(&other->region_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  postal_code_.Swap(&other->postal_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sorting_code_.Swap(&other->sorting_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  administrative_area_.Swap(&other->administrative_area_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  locality_.Swap(&other->locality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sublocality_.Swap(&other->sublocality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  organization_.Swap(&other->organization_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(revision_, other->revision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PostalAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CardDetails::InitAsDefaultInstance() {
  ::idpass::_CardDetails_default_instance_._instance.get_mutable()->dateofbirth_ = const_cast< ::idpass::Date*>(
      ::idpass::Date::internal_default_instance());
  ::idpass::_CardDetails_default_instance_._instance.get_mutable()->postaladdress_ = const_cast< ::idpass::PostalAddress*>(
      ::idpass::PostalAddress::internal_default_instance());
}
class CardDetails::_Internal {
 public:
  static const ::idpass::Date& dateofbirth(const CardDetails* msg);
  static const ::idpass::PostalAddress& postaladdress(const CardDetails* msg);
};

const ::idpass::Date&
CardDetails::_Internal::dateofbirth(const CardDetails* msg) {
  return *msg->dateofbirth_;
}
const ::idpass::PostalAddress&
CardDetails::_Internal::postaladdress(const CardDetails* msg) {
  return *msg->postaladdress_;
}
CardDetails::CardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  extra_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.CardDetails)
}
CardDetails::CardDetails(const CardDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extra_(from.extra_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  surname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_surname().empty()) {
    surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_surname(),
      GetArena());
  }
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_givenname().empty()) {
    givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_givenname(),
      GetArena());
  }
  placeofbirth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placeofbirth().empty()) {
    placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_placeofbirth(),
      GetArena());
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fullname(),
      GetArena());
  }
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uin().empty()) {
    uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uin(),
      GetArena());
  }
  if (from._internal_has_dateofbirth()) {
    dateofbirth_ = new ::idpass::Date(*from.dateofbirth_);
  } else {
    dateofbirth_ = nullptr;
  }
  if (from._internal_has_postaladdress()) {
    postaladdress_ = new ::idpass::PostalAddress(*from.postaladdress_);
  } else {
    postaladdress_ = nullptr;
  }
  ::memcpy(&createdat_, &from.createdat_,
    static_cast<size_t>(reinterpret_cast<char*>(&gender_) -
    reinterpret_cast<char*>(&createdat_)) + sizeof(gender_));
  // @@protoc_insertion_point(copy_constructor:idpass.CardDetails)
}

void CardDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CardDetails_idpasslite_2eproto.base);
  surname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeofbirth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dateofbirth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&dateofbirth_)) + sizeof(gender_));
}

CardDetails::~CardDetails() {
  // @@protoc_insertion_point(destructor:idpass.CardDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CardDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  surname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeofbirth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dateofbirth_;
  if (this != internal_default_instance()) delete postaladdress_;
}

void CardDetails::ArenaDtor(void* object) {
  CardDetails* _this = reinterpret_cast< CardDetails* >(object);
  (void)_this;
}
void CardDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CardDetails& CardDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CardDetails_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void CardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.CardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_.Clear();
  surname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  givenname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeofbirth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && dateofbirth_ != nullptr) {
    delete dateofbirth_;
  }
  dateofbirth_ = nullptr;
  if (GetArena() == nullptr && postaladdress_ != nullptr) {
    delete postaladdress_;
  }
  postaladdress_ = nullptr;
  ::memset(&createdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&createdat_)) + sizeof(gender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string surName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_surname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.CardDetails.surName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string givenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_givenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.CardDetails.givenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeOfBirth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_placeofbirth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.CardDetails.placeOfBirth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .idpass.Date dateOfBirth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dateofbirth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .idpass.Pair extra = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 createdAt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          createdat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gender = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.CardDetails.fullName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UIN = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_uin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "idpass.CardDetails.UIN"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .idpass.PostalAddress postalAddress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_postaladdress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CardDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.CardDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string surName = 1;
  if (this->surname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_surname().data(), static_cast<int>(this->_internal_surname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.CardDetails.surName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_surname(), target);
  }

  // string givenName = 2;
  if (this->givenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_givenname().data(), static_cast<int>(this->_internal_givenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.CardDetails.givenName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_givenname(), target);
  }

  // string placeOfBirth = 3;
  if (this->placeofbirth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placeofbirth().data(), static_cast<int>(this->_internal_placeofbirth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.CardDetails.placeOfBirth");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_placeofbirth(), target);
  }

  // .idpass.Date dateOfBirth = 4;
  if (this->has_dateofbirth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dateofbirth(this), target, stream);
  }

  // repeated .idpass.Pair extra = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_extra(i), target, stream);
  }

  // int64 createdAt = 6;
  if (this->createdat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_createdat(), target);
  }

  // int32 gender = 7;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_gender(), target);
  }

  // string fullName = 8;
  if (this->fullname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.CardDetails.fullName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fullname(), target);
  }

  // string UIN = 9;
  if (this->uin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uin().data(), static_cast<int>(this->_internal_uin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "idpass.CardDetails.UIN");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uin(), target);
  }

  // .idpass.PostalAddress postalAddress = 10;
  if (this->has_postaladdress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::postaladdress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.CardDetails)
  return target;
}

size_t CardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.CardDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idpass.Pair extra = 5;
  total_size += 1UL * this->_internal_extra_size();
  for (const auto& msg : this->extra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string surName = 1;
  if (this->surname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_surname());
  }

  // string givenName = 2;
  if (this->givenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_givenname());
  }

  // string placeOfBirth = 3;
  if (this->placeofbirth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placeofbirth());
  }

  // string fullName = 8;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // string UIN = 9;
  if (this->uin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uin());
  }

  // .idpass.Date dateOfBirth = 4;
  if (this->has_dateofbirth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dateofbirth_);
  }

  // .idpass.PostalAddress postalAddress = 10;
  if (this->has_postaladdress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postaladdress_);
  }

  // int64 createdAt = 6;
  if (this->createdat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_createdat());
  }

  // int32 gender = 7;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gender());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CardDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.CardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CardDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CardDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.CardDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.CardDetails)
    MergeFrom(*source);
  }
}

void CardDetails::MergeFrom(const CardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.CardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_.MergeFrom(from.extra_);
  if (from.surname().size() > 0) {
    _internal_set_surname(from._internal_surname());
  }
  if (from.givenname().size() > 0) {
    _internal_set_givenname(from._internal_givenname());
  }
  if (from.placeofbirth().size() > 0) {
    _internal_set_placeofbirth(from._internal_placeofbirth());
  }
  if (from.fullname().size() > 0) {
    _internal_set_fullname(from._internal_fullname());
  }
  if (from.uin().size() > 0) {
    _internal_set_uin(from._internal_uin());
  }
  if (from.has_dateofbirth()) {
    _internal_mutable_dateofbirth()->::idpass::Date::MergeFrom(from._internal_dateofbirth());
  }
  if (from.has_postaladdress()) {
    _internal_mutable_postaladdress()->::idpass::PostalAddress::MergeFrom(from._internal_postaladdress());
  }
  if (from.createdat() != 0) {
    _internal_set_createdat(from._internal_createdat());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
}

void CardDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.CardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardDetails::CopyFrom(const CardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.CardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardDetails::IsInitialized() const {
  return true;
}

void CardDetails::InternalSwap(CardDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  extra_.InternalSwap(&other->extra_);
  surname_.Swap(&other->surname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  givenname_.Swap(&other->givenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeofbirth_.Swap(&other->placeofbirth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uin_.Swap(&other->uin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardDetails, gender_)
      + sizeof(CardDetails::gender_)
      - PROTOBUF_FIELD_OFFSET(CardDetails, dateofbirth_)>(
          reinterpret_cast<char*>(&dateofbirth_),
          reinterpret_cast<char*>(&other->dateofbirth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IDPassCard::InitAsDefaultInstance() {
  ::idpass::_IDPassCard_default_instance_._instance.get_mutable()->access_ = const_cast< ::idpass::CardAccess*>(
      ::idpass::CardAccess::internal_default_instance());
  ::idpass::_IDPassCard_default_instance_._instance.get_mutable()->details_ = const_cast< ::idpass::CardDetails*>(
      ::idpass::CardDetails::internal_default_instance());
}
class IDPassCard::_Internal {
 public:
  static const ::idpass::CardAccess& access(const IDPassCard* msg);
  static const ::idpass::CardDetails& details(const IDPassCard* msg);
};

const ::idpass::CardAccess&
IDPassCard::_Internal::access(const IDPassCard* msg) {
  return *msg->access_;
}
const ::idpass::CardDetails&
IDPassCard::_Internal::details(const IDPassCard* msg) {
  return *msg->details_;
}
IDPassCard::IDPassCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.IDPassCard)
}
IDPassCard::IDPassCard(const IDPassCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryptionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encryptionkey().empty()) {
    encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encryptionkey(),
      GetArena());
  }
  if (from._internal_has_access()) {
    access_ = new ::idpass::CardAccess(*from.access_);
  } else {
    access_ = nullptr;
  }
  if (from._internal_has_details()) {
    details_ = new ::idpass::CardDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:idpass.IDPassCard)
}

void IDPassCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDPassCard_idpasslite_2eproto.base);
  encryptionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&access_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&details_) -
      reinterpret_cast<char*>(&access_)) + sizeof(details_));
}

IDPassCard::~IDPassCard() {
  // @@protoc_insertion_point(destructor:idpass.IDPassCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDPassCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryptionkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete access_;
  if (this != internal_default_instance()) delete details_;
}

void IDPassCard::ArenaDtor(void* object) {
  IDPassCard* _this = reinterpret_cast< IDPassCard* >(object);
  (void)_this;
}
void IDPassCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDPassCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDPassCard& IDPassCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDPassCard_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void IDPassCard::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.IDPassCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encryptionkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && access_ != nullptr) {
    delete access_;
  }
  access_ = nullptr;
  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDPassCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idpass.CardAccess access = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .idpass.CardDetails details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encryptionKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encryptionkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDPassCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.IDPassCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idpass.CardAccess access = 1;
  if (this->has_access()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::access(this), target, stream);
  }

  // .idpass.CardDetails details = 2;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::details(this), target, stream);
  }

  // bytes encryptionKey = 3;
  if (this->encryptionkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_encryptionkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.IDPassCard)
  return target;
}

size_t IDPassCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.IDPassCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encryptionKey = 3;
  if (this->encryptionkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encryptionkey());
  }

  // .idpass.CardAccess access = 1;
  if (this->has_access()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *access_);
  }

  // .idpass.CardDetails details = 2;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDPassCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.IDPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  const IDPassCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDPassCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.IDPassCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.IDPassCard)
    MergeFrom(*source);
  }
}

void IDPassCard::MergeFrom(const IDPassCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.IDPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encryptionkey().size() > 0) {
    _internal_set_encryptionkey(from._internal_encryptionkey());
  }
  if (from.has_access()) {
    _internal_mutable_access()->::idpass::CardAccess::MergeFrom(from._internal_access());
  }
  if (from.has_details()) {
    _internal_mutable_details()->::idpass::CardDetails::MergeFrom(from._internal_details());
  }
}

void IDPassCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.IDPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDPassCard::CopyFrom(const IDPassCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.IDPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDPassCard::IsInitialized() const {
  return true;
}

void IDPassCard::InternalSwap(IDPassCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encryptionkey_.Swap(&other->encryptionkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IDPassCard, details_)
      + sizeof(IDPassCard::details_)
      - PROTOBUF_FIELD_OFFSET(IDPassCard, access_)>(
          reinterpret_cast<char*>(&access_),
          reinterpret_cast<char*>(&other->access_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IDPassCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignedIDPassCard::InitAsDefaultInstance() {
  ::idpass::_SignedIDPassCard_default_instance_._instance.get_mutable()->card_ = const_cast< ::idpass::IDPassCard*>(
      ::idpass::IDPassCard::internal_default_instance());
}
class SignedIDPassCard::_Internal {
 public:
  static const ::idpass::IDPassCard& card(const SignedIDPassCard* msg);
};

const ::idpass::IDPassCard&
SignedIDPassCard::_Internal::card(const SignedIDPassCard* msg) {
  return *msg->card_;
}
SignedIDPassCard::SignedIDPassCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.SignedIDPassCard)
}
SignedIDPassCard::SignedIDPassCard(const SignedIDPassCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_card()) {
    card_ = new ::idpass::IDPassCard(*from.card_);
  } else {
    card_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:idpass.SignedIDPassCard)
}

void SignedIDPassCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignedIDPassCard_idpasslite_2eproto.base);
  card_ = nullptr;
}

SignedIDPassCard::~SignedIDPassCard() {
  // @@protoc_insertion_point(destructor:idpass.SignedIDPassCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignedIDPassCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete card_;
}

void SignedIDPassCard::ArenaDtor(void* object) {
  SignedIDPassCard* _this = reinterpret_cast< SignedIDPassCard* >(object);
  (void)_this;
}
void SignedIDPassCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignedIDPassCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignedIDPassCard& SignedIDPassCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignedIDPassCard_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void SignedIDPassCard::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.SignedIDPassCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && card_ != nullptr) {
    delete card_;
  }
  card_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedIDPassCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idpass.IDPassCard card = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignedIDPassCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.SignedIDPassCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idpass.IDPassCard card = 1;
  if (this->has_card()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::card(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.SignedIDPassCard)
  return target;
}

size_t SignedIDPassCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.SignedIDPassCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idpass.IDPassCard card = 1;
  if (this->has_card()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *card_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedIDPassCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.SignedIDPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedIDPassCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignedIDPassCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.SignedIDPassCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.SignedIDPassCard)
    MergeFrom(*source);
  }
}

void SignedIDPassCard::MergeFrom(const SignedIDPassCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.SignedIDPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card()) {
    _internal_mutable_card()->::idpass::IDPassCard::MergeFrom(from._internal_card());
  }
}

void SignedIDPassCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.SignedIDPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedIDPassCard::CopyFrom(const SignedIDPassCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.SignedIDPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedIDPassCard::IsInitialized() const {
  return true;
}

void SignedIDPassCard::InternalSwap(SignedIDPassCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(card_, other->card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedIDPassCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublicSignedIDPassCard::InitAsDefaultInstance() {
  ::idpass::_PublicSignedIDPassCard_default_instance_._instance.get_mutable()->details_ = const_cast< ::idpass::CardDetails*>(
      ::idpass::CardDetails::internal_default_instance());
}
class PublicSignedIDPassCard::_Internal {
 public:
  static const ::idpass::CardDetails& details(const PublicSignedIDPassCard* msg);
};

const ::idpass::CardDetails&
PublicSignedIDPassCard::_Internal::details(const PublicSignedIDPassCard* msg) {
  return *msg->details_;
}
PublicSignedIDPassCard::PublicSignedIDPassCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.PublicSignedIDPassCard)
}
PublicSignedIDPassCard::PublicSignedIDPassCard(const PublicSignedIDPassCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    details_ = new ::idpass::CardDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:idpass.PublicSignedIDPassCard)
}

void PublicSignedIDPassCard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublicSignedIDPassCard_idpasslite_2eproto.base);
  details_ = nullptr;
}

PublicSignedIDPassCard::~PublicSignedIDPassCard() {
  // @@protoc_insertion_point(destructor:idpass.PublicSignedIDPassCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PublicSignedIDPassCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete details_;
}

void PublicSignedIDPassCard::ArenaDtor(void* object) {
  PublicSignedIDPassCard* _this = reinterpret_cast< PublicSignedIDPassCard* >(object);
  (void)_this;
}
void PublicSignedIDPassCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublicSignedIDPassCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublicSignedIDPassCard& PublicSignedIDPassCard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublicSignedIDPassCard_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void PublicSignedIDPassCard::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.PublicSignedIDPassCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicSignedIDPassCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idpass.CardDetails details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublicSignedIDPassCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.PublicSignedIDPassCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idpass.CardDetails details = 1;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.PublicSignedIDPassCard)
  return target;
}

size_t PublicSignedIDPassCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.PublicSignedIDPassCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idpass.CardDetails details = 1;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicSignedIDPassCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.PublicSignedIDPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicSignedIDPassCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublicSignedIDPassCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.PublicSignedIDPassCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.PublicSignedIDPassCard)
    MergeFrom(*source);
  }
}

void PublicSignedIDPassCard::MergeFrom(const PublicSignedIDPassCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.PublicSignedIDPassCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    _internal_mutable_details()->::idpass::CardDetails::MergeFrom(from._internal_details());
  }
}

void PublicSignedIDPassCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.PublicSignedIDPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicSignedIDPassCard::CopyFrom(const PublicSignedIDPassCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.PublicSignedIDPassCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicSignedIDPassCard::IsInitialized() const {
  return true;
}

void PublicSignedIDPassCard::InternalSwap(PublicSignedIDPassCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(details_, other->details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicSignedIDPassCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Certificate::InitAsDefaultInstance() {
}
class Certificate::_Internal {
 public:
};

Certificate::Certificate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.Certificate)
}
Certificate::Certificate(const Certificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pubkey(),
      GetArena());
  }
  issuerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_issuerkey().empty()) {
    issuerkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_issuerkey(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:idpass.Certificate)
}

void Certificate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Certificate_idpasslite_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuerkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Certificate::~Certificate() {
  // @@protoc_insertion_point(destructor:idpass.Certificate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Certificate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuerkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Certificate::ArenaDtor(void* object) {
  Certificate* _this = reinterpret_cast< Certificate* >(object);
  (void)_this;
}
void Certificate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Certificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Certificate& Certificate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Certificate_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void Certificate::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.Certificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  issuerkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Certificate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes issuerkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_issuerkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Certificate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.Certificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // bytes issuerkey = 2;
  if (this->issuerkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_issuerkey(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.Certificate)
  return target;
}

size_t Certificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.Certificate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes issuerkey = 2;
  if (this->issuerkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_issuerkey());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Certificate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.Certificate)
  GOOGLE_DCHECK_NE(&from, this);
  const Certificate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Certificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.Certificate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.Certificate)
    MergeFrom(*source);
  }
}

void Certificate::MergeFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.Certificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {
    _internal_set_pubkey(from._internal_pubkey());
  }
  if (from.issuerkey().size() > 0) {
    _internal_set_issuerkey(from._internal_issuerkey());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void Certificate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Certificate::CopyFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certificate::IsInitialized() const {
  return true;
}

void Certificate::InternalSwap(Certificate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  issuerkey_.Swap(&other->issuerkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Certificate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IDPassCards::InitAsDefaultInstance() {
  ::idpass::_IDPassCards_default_instance_._instance.get_mutable()->publiccard_ = const_cast< ::idpass::PublicSignedIDPassCard*>(
      ::idpass::PublicSignedIDPassCard::internal_default_instance());
}
class IDPassCards::_Internal {
 public:
  static const ::idpass::PublicSignedIDPassCard& publiccard(const IDPassCards* msg);
};

const ::idpass::PublicSignedIDPassCard&
IDPassCards::_Internal::publiccard(const IDPassCards* msg) {
  return *msg->publiccard_;
}
IDPassCards::IDPassCards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  certificates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idpass.IDPassCards)
}
IDPassCards::IDPassCards(const IDPassCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      certificates_(from.certificates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryptedcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encryptedcard().empty()) {
    encryptedcard_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encryptedcard(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  signerpublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signerpublickey().empty()) {
    signerpublickey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signerpublickey(),
      GetArena());
  }
  if (from._internal_has_publiccard()) {
    publiccard_ = new ::idpass::PublicSignedIDPassCard(*from.publiccard_);
  } else {
    publiccard_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:idpass.IDPassCards)
}

void IDPassCards::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDPassCards_idpasslite_2eproto.base);
  encryptedcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signerpublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publiccard_ = nullptr;
}

IDPassCards::~IDPassCards() {
  // @@protoc_insertion_point(destructor:idpass.IDPassCards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDPassCards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryptedcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signerpublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete publiccard_;
}

void IDPassCards::ArenaDtor(void* object) {
  IDPassCards* _this = reinterpret_cast< IDPassCards* >(object);
  (void)_this;
}
void IDPassCards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDPassCards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDPassCards& IDPassCards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDPassCards_idpasslite_2eproto.base);
  return *internal_default_instance();
}


void IDPassCards::Clear() {
// @@protoc_insertion_point(message_clear_start:idpass.IDPassCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificates_.Clear();
  encryptedcard_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signerpublickey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && publiccard_ != nullptr) {
    delete publiccard_;
  }
  publiccard_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDPassCards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idpass.PublicSignedIDPassCard publicCard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_publiccard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encryptedCard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encryptedcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signerPublicKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signerpublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .idpass.Certificate certificates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_certificates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDPassCards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idpass.IDPassCards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idpass.PublicSignedIDPassCard publicCard = 1;
  if (this->has_publiccard()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::publiccard(this), target, stream);
  }

  // bytes encryptedCard = 2;
  if (this->encryptedcard().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encryptedcard(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  // bytes signerPublicKey = 4;
  if (this->signerpublickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signerpublickey(), target);
  }

  // repeated .idpass.Certificate certificates = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_certificates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_certificates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idpass.IDPassCards)
  return target;
}

size_t IDPassCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idpass.IDPassCards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idpass.Certificate certificates = 5;
  total_size += 1UL * this->_internal_certificates_size();
  for (const auto& msg : this->certificates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes encryptedCard = 2;
  if (this->encryptedcard().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encryptedcard());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes signerPublicKey = 4;
  if (this->signerpublickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signerpublickey());
  }

  // .idpass.PublicSignedIDPassCard publicCard = 1;
  if (this->has_publiccard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publiccard_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDPassCards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idpass.IDPassCards)
  GOOGLE_DCHECK_NE(&from, this);
  const IDPassCards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDPassCards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idpass.IDPassCards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idpass.IDPassCards)
    MergeFrom(*source);
  }
}

void IDPassCards::MergeFrom(const IDPassCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idpass.IDPassCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  certificates_.MergeFrom(from.certificates_);
  if (from.encryptedcard().size() > 0) {
    _internal_set_encryptedcard(from._internal_encryptedcard());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.signerpublickey().size() > 0) {
    _internal_set_signerpublickey(from._internal_signerpublickey());
  }
  if (from.has_publiccard()) {
    _internal_mutable_publiccard()->::idpass::PublicSignedIDPassCard::MergeFrom(from._internal_publiccard());
  }
}

void IDPassCards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idpass.IDPassCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDPassCards::CopyFrom(const IDPassCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idpass.IDPassCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDPassCards::IsInitialized() const {
  return true;
}

void IDPassCards::InternalSwap(IDPassCards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  certificates_.InternalSwap(&other->certificates_);
  encryptedcard_.Swap(&other->encryptedcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signerpublickey_.Swap(&other->signerpublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(publiccard_, other->publiccard_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IDPassCards::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idpass
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idpass::Date* Arena::CreateMaybeMessage< ::idpass::Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::Pair* Arena::CreateMaybeMessage< ::idpass::Pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::Dictionary* Arena::CreateMaybeMessage< ::idpass::Dictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::CardAccess* Arena::CreateMaybeMessage< ::idpass::CardAccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::CardAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::PostalAddress* Arena::CreateMaybeMessage< ::idpass::PostalAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::PostalAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::CardDetails* Arena::CreateMaybeMessage< ::idpass::CardDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::CardDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::IDPassCard* Arena::CreateMaybeMessage< ::idpass::IDPassCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::IDPassCard >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::SignedIDPassCard* Arena::CreateMaybeMessage< ::idpass::SignedIDPassCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::SignedIDPassCard >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::PublicSignedIDPassCard* Arena::CreateMaybeMessage< ::idpass::PublicSignedIDPassCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::PublicSignedIDPassCard >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::Certificate* Arena::CreateMaybeMessage< ::idpass::Certificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::Certificate >(arena);
}
template<> PROTOBUF_NOINLINE ::idpass::IDPassCards* Arena::CreateMaybeMessage< ::idpass::IDPassCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idpass::IDPassCards >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
