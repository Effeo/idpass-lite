// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Ident_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_byteArray_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_byteArrays_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Certificate_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pair_idpasslite_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_idpasslite_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PostalAddress_idpasslite_2eproto;
namespace api {
class byteArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<byteArray> _instance;
} _byteArray_default_instance_;
class byteArraysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<byteArrays> _instance;
} _byteArrays_default_instance_;
class KeySetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeySet> _instance;
} _KeySet_default_instance_;
class CertificatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Certificates> _instance;
} _Certificates_default_instance_;
class IdentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ident> _instance;
} _Ident_default_instance_;
class IdentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Idents> _instance;
} _Idents_default_instance_;
}  // namespace api
static void InitDefaultsscc_info_Certificates_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Certificates_default_instance_;
    new (ptr) ::api::Certificates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Certificates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Certificates_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Certificates_api_2eproto}, {
      &scc_info_Certificate_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_Ident_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Ident_default_instance_;
    new (ptr) ::api::Ident();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Ident::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Ident_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Ident_api_2eproto}, {
      &scc_info_Date_idpasslite_2eproto.base,
      &scc_info_byteArrays_api_2eproto.base,
      &scc_info_Pair_idpasslite_2eproto.base,
      &scc_info_PostalAddress_idpasslite_2eproto.base,}};

static void InitDefaultsscc_info_Idents_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_Idents_default_instance_;
    new (ptr) ::api::Idents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::Idents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Idents_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Idents_api_2eproto}, {
      &scc_info_Ident_api_2eproto.base,}};

static void InitDefaultsscc_info_KeySet_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_KeySet_default_instance_;
    new (ptr) ::api::KeySet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::KeySet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeySet_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeySet_api_2eproto}, {
      &scc_info_byteArray_api_2eproto.base,}};

static void InitDefaultsscc_info_byteArray_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_byteArray_default_instance_;
    new (ptr) ::api::byteArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::byteArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_byteArray_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_byteArray_api_2eproto}, {}};

static void InitDefaultsscc_info_byteArrays_api_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::api::_byteArrays_default_instance_;
    new (ptr) ::api::byteArrays();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::api::byteArrays::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_byteArrays_api_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_byteArrays_api_2eproto}, {
      &scc_info_byteArray_api_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_api_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_api_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::byteArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::byteArray, typ_),
  PROTOBUF_FIELD_OFFSET(::api::byteArray, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::byteArrays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::byteArrays, vals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::KeySet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::KeySet, encryptionkey_),
  PROTOBUF_FIELD_OFFSET(::api::KeySet, signaturekey_),
  PROTOBUF_FIELD_OFFSET(::api::KeySet, verificationkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Certificates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Certificates, cert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Ident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Ident, surname_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, givenname_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, placeofbirth_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, pin_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, dateofbirth_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, photos_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, photo_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, privextra_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, pubextra_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, uin_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, fullname_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, gender_),
  PROTOBUF_FIELD_OFFSET(::api::Ident, postaladdress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::api::Idents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::api::Idents, ident_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::api::byteArray)},
  { 7, -1, sizeof(::api::byteArrays)},
  { 13, -1, sizeof(::api::KeySet)},
  { 21, -1, sizeof(::api::Certificates)},
  { 27, -1, sizeof(::api::Ident)},
  { 45, -1, sizeof(::api::Idents)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_byteArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_byteArrays_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_KeySet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Certificates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Ident_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::api::_Idents_default_instance_),
};

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tapi.proto\022\003api\032\020idpasslite.proto\"\237\001\n\tb"
  "yteArray\022\037\n\003typ\030\001 \001(\0162\022.api.byteArray.Ty"
  "p\022\013\n\003val\030\002 \001(\014\"d\n\003Typ\022\010\n\004BLOB\020\000\022\013\n\007AEADK"
  "EY\020\001\022\021\n\rED25519PUBKEY\020\002\022\022\n\016ED25519PRIVKE"
  "Y\020\003\022\024\n\020ED25519SIGNATURE\020\004\022\t\n\005PHOTO\020\005\"*\n\n"
  "byteArrays\022\034\n\004vals\030\001 \003(\0132\016.api.byteArray"
  "\"_\n\006KeySet\022\025\n\rencryptionKey\030\001 \001(\014\022\024\n\014sig"
  "natureKey\030\002 \001(\014\022(\n\020verificationKeys\030\003 \003("
  "\0132\016.api.byteArray\"1\n\014Certificates\022!\n\004cer"
  "t\030\001 \003(\0132\023.idpass.Certificate\"\277\002\n\005Ident\022\017"
  "\n\007surName\030\001 \001(\t\022\021\n\tgivenName\030\002 \001(\t\022\024\n\014pl"
  "aceOfBirth\030\003 \001(\t\022\013\n\003pin\030\004 \001(\t\022!\n\013dateOfB"
  "irth\030\005 \001(\0132\014.idpass.Date\022\037\n\006photos\030\006 \001(\013"
  "2\017.api.byteArrays\022\r\n\005photo\030\007 \001(\014\022\037\n\tpriv"
  "Extra\030\010 \003(\0132\014.idpass.Pair\022\036\n\010pubExtra\030\t "
  "\003(\0132\014.idpass.Pair\022\013\n\003UIN\030\n \001(\t\022\020\n\010fullNa"
  "me\030\013 \001(\t\022\016\n\006gender\030\014 \001(\005\022,\n\rpostalAddres"
  "s\030\r \001(\0132\025.idpass.PostalAddress\"#\n\006Idents"
  "\022\031\n\005ident\030\001 \003(\0132\n.api.IdentB\021\n\rorg.api.p"
  "rotoP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_api_2eproto_deps[1] = {
  &::descriptor_table_idpasslite_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_api_2eproto_sccs[6] = {
  &scc_info_Certificates_api_2eproto.base,
  &scc_info_Ident_api_2eproto.base,
  &scc_info_Idents_api_2eproto.base,
  &scc_info_KeySet_api_2eproto.base,
  &scc_info_byteArray_api_2eproto.base,
  &scc_info_byteArrays_api_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
  false, false, descriptor_table_protodef_api_2eproto, "api.proto", 774,
  &descriptor_table_api_2eproto_once, descriptor_table_api_2eproto_sccs, descriptor_table_api_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_api_2eproto::offsets,
  file_level_metadata_api_2eproto, 6, file_level_enum_descriptors_api_2eproto, file_level_service_descriptors_api_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2eproto)), true);
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* byteArray_Typ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
  return file_level_enum_descriptors_api_2eproto[0];
}
bool byteArray_Typ_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr byteArray_Typ byteArray::BLOB;
constexpr byteArray_Typ byteArray::AEADKEY;
constexpr byteArray_Typ byteArray::ED25519PUBKEY;
constexpr byteArray_Typ byteArray::ED25519PRIVKEY;
constexpr byteArray_Typ byteArray::ED25519SIGNATURE;
constexpr byteArray_Typ byteArray::PHOTO;
constexpr byteArray_Typ byteArray::Typ_MIN;
constexpr byteArray_Typ byteArray::Typ_MAX;
constexpr int byteArray::Typ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void byteArray::InitAsDefaultInstance() {
}
class byteArray::_Internal {
 public:
};

byteArray::byteArray(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.byteArray)
}
byteArray::byteArray(const byteArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_val().empty()) {
    val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_val(),
      GetArena());
  }
  typ_ = from.typ_;
  // @@protoc_insertion_point(copy_constructor:api.byteArray)
}

void byteArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_byteArray_api_2eproto.base);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  typ_ = 0;
}

byteArray::~byteArray() {
  // @@protoc_insertion_point(destructor:api.byteArray)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void byteArray::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void byteArray::ArenaDtor(void* object) {
  byteArray* _this = reinterpret_cast< byteArray* >(object);
  (void)_this;
}
void byteArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void byteArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const byteArray& byteArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_byteArray_api_2eproto.base);
  return *internal_default_instance();
}


void byteArray::Clear() {
// @@protoc_insertion_point(message_clear_start:api.byteArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  typ_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* byteArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .api.byteArray.Typ typ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_typ(static_cast<::api::byteArray_Typ>(val));
        } else goto handle_unusual;
        continue;
      // bytes val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* byteArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.byteArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .api.byteArray.Typ typ = 1;
  if (this->typ() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_typ(), target);
  }

  // bytes val = 2;
  if (this->val().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.byteArray)
  return target;
}

size_t byteArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.byteArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes val = 2;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  // .api.byteArray.Typ typ = 1;
  if (this->typ() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_typ());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void byteArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.byteArray)
  GOOGLE_DCHECK_NE(&from, this);
  const byteArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<byteArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.byteArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.byteArray)
    MergeFrom(*source);
  }
}

void byteArray::MergeFrom(const byteArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.byteArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val().size() > 0) {
    _internal_set_val(from._internal_val());
  }
  if (from.typ() != 0) {
    _internal_set_typ(from._internal_typ());
  }
}

void byteArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.byteArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void byteArray::CopyFrom(const byteArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.byteArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool byteArray::IsInitialized() const {
  return true;
}

void byteArray::InternalSwap(byteArray* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(typ_, other->typ_);
}

::PROTOBUF_NAMESPACE_ID::Metadata byteArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void byteArrays::InitAsDefaultInstance() {
}
class byteArrays::_Internal {
 public:
};

byteArrays::byteArrays(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.byteArrays)
}
byteArrays::byteArrays(const byteArrays& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vals_(from.vals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.byteArrays)
}

void byteArrays::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_byteArrays_api_2eproto.base);
}

byteArrays::~byteArrays() {
  // @@protoc_insertion_point(destructor:api.byteArrays)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void byteArrays::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void byteArrays::ArenaDtor(void* object) {
  byteArrays* _this = reinterpret_cast< byteArrays* >(object);
  (void)_this;
}
void byteArrays::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void byteArrays::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const byteArrays& byteArrays::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_byteArrays_api_2eproto.base);
  return *internal_default_instance();
}


void byteArrays::Clear() {
// @@protoc_insertion_point(message_clear_start:api.byteArrays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vals_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* byteArrays::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .api.byteArray vals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* byteArrays::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.byteArrays)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.byteArray vals = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vals(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.byteArrays)
  return target;
}

size_t byteArrays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.byteArrays)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.byteArray vals = 1;
  total_size += 1UL * this->_internal_vals_size();
  for (const auto& msg : this->vals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void byteArrays::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.byteArrays)
  GOOGLE_DCHECK_NE(&from, this);
  const byteArrays* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<byteArrays>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.byteArrays)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.byteArrays)
    MergeFrom(*source);
  }
}

void byteArrays::MergeFrom(const byteArrays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.byteArrays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vals_.MergeFrom(from.vals_);
}

void byteArrays::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.byteArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void byteArrays::CopyFrom(const byteArrays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.byteArrays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool byteArrays::IsInitialized() const {
  return true;
}

void byteArrays::InternalSwap(byteArrays* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vals_.InternalSwap(&other->vals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata byteArrays::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeySet::InitAsDefaultInstance() {
}
class KeySet::_Internal {
 public:
};

KeySet::KeySet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  verificationkeys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.KeySet)
}
KeySet::KeySet(const KeySet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      verificationkeys_(from.verificationkeys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryptionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encryptionkey().empty()) {
    encryptionkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encryptionkey(),
      GetArena());
  }
  signaturekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signaturekey().empty()) {
    signaturekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signaturekey(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:api.KeySet)
}

void KeySet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeySet_api_2eproto.base);
  encryptionkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signaturekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeySet::~KeySet() {
  // @@protoc_insertion_point(destructor:api.KeySet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeySet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryptionkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signaturekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeySet::ArenaDtor(void* object) {
  KeySet* _this = reinterpret_cast< KeySet* >(object);
  (void)_this;
}
void KeySet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeySet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeySet& KeySet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeySet_api_2eproto.base);
  return *internal_default_instance();
}


void KeySet::Clear() {
// @@protoc_insertion_point(message_clear_start:api.KeySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  verificationkeys_.Clear();
  encryptionkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signaturekey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeySet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes encryptionKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encryptionkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signatureKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signaturekey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .api.byteArray verificationKeys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_verificationkeys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeySet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.KeySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encryptionKey = 1;
  if (this->encryptionkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encryptionkey(), target);
  }

  // bytes signatureKey = 2;
  if (this->signaturekey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signaturekey(), target);
  }

  // repeated .api.byteArray verificationKeys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_verificationkeys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_verificationkeys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.KeySet)
  return target;
}

size_t KeySet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.KeySet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.byteArray verificationKeys = 3;
  total_size += 1UL * this->_internal_verificationkeys_size();
  for (const auto& msg : this->verificationkeys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes encryptionKey = 1;
  if (this->encryptionkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encryptionkey());
  }

  // bytes signatureKey = 2;
  if (this->signaturekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signaturekey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeySet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.KeySet)
  GOOGLE_DCHECK_NE(&from, this);
  const KeySet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeySet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.KeySet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.KeySet)
    MergeFrom(*source);
  }
}

void KeySet::MergeFrom(const KeySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.KeySet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  verificationkeys_.MergeFrom(from.verificationkeys_);
  if (from.encryptionkey().size() > 0) {
    _internal_set_encryptionkey(from._internal_encryptionkey());
  }
  if (from.signaturekey().size() > 0) {
    _internal_set_signaturekey(from._internal_signaturekey());
  }
}

void KeySet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.KeySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeySet::CopyFrom(const KeySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.KeySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeySet::IsInitialized() const {
  return true;
}

void KeySet::InternalSwap(KeySet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  verificationkeys_.InternalSwap(&other->verificationkeys_);
  encryptionkey_.Swap(&other->encryptionkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signaturekey_.Swap(&other->signaturekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeySet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Certificates::InitAsDefaultInstance() {
}
class Certificates::_Internal {
 public:
};

void Certificates::clear_cert() {
  cert_.Clear();
}
Certificates::Certificates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cert_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.Certificates)
}
Certificates::Certificates(const Certificates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cert_(from.cert_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.Certificates)
}

void Certificates::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Certificates_api_2eproto.base);
}

Certificates::~Certificates() {
  // @@protoc_insertion_point(destructor:api.Certificates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Certificates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Certificates::ArenaDtor(void* object) {
  Certificates* _this = reinterpret_cast< Certificates* >(object);
  (void)_this;
}
void Certificates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Certificates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Certificates& Certificates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Certificates_api_2eproto.base);
  return *internal_default_instance();
}


void Certificates::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Certificates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cert_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Certificates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .idpass.Certificate cert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Certificates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Certificates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idpass.Certificate cert = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cert_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cert(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Certificates)
  return target;
}

size_t Certificates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Certificates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idpass.Certificate cert = 1;
  total_size += 1UL * this->_internal_cert_size();
  for (const auto& msg : this->cert_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Certificates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Certificates)
  GOOGLE_DCHECK_NE(&from, this);
  const Certificates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Certificates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Certificates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Certificates)
    MergeFrom(*source);
  }
}

void Certificates::MergeFrom(const Certificates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Certificates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cert_.MergeFrom(from.cert_);
}

void Certificates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Certificates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Certificates::CopyFrom(const Certificates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Certificates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certificates::IsInitialized() const {
  return true;
}

void Certificates::InternalSwap(Certificates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cert_.InternalSwap(&other->cert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Certificates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ident::InitAsDefaultInstance() {
  ::api::_Ident_default_instance_._instance.get_mutable()->dateofbirth_ = const_cast< ::idpass::Date*>(
      ::idpass::Date::internal_default_instance());
  ::api::_Ident_default_instance_._instance.get_mutable()->photos_ = const_cast< ::api::byteArrays*>(
      ::api::byteArrays::internal_default_instance());
  ::api::_Ident_default_instance_._instance.get_mutable()->postaladdress_ = const_cast< ::idpass::PostalAddress*>(
      ::idpass::PostalAddress::internal_default_instance());
}
class Ident::_Internal {
 public:
  static const ::idpass::Date& dateofbirth(const Ident* msg);
  static const ::api::byteArrays& photos(const Ident* msg);
  static const ::idpass::PostalAddress& postaladdress(const Ident* msg);
};

const ::idpass::Date&
Ident::_Internal::dateofbirth(const Ident* msg) {
  return *msg->dateofbirth_;
}
const ::api::byteArrays&
Ident::_Internal::photos(const Ident* msg) {
  return *msg->photos_;
}
const ::idpass::PostalAddress&
Ident::_Internal::postaladdress(const Ident* msg) {
  return *msg->postaladdress_;
}
void Ident::clear_dateofbirth() {
  if (GetArena() == nullptr && dateofbirth_ != nullptr) {
    delete dateofbirth_;
  }
  dateofbirth_ = nullptr;
}
void Ident::clear_privextra() {
  privextra_.Clear();
}
void Ident::clear_pubextra() {
  pubextra_.Clear();
}
void Ident::clear_postaladdress() {
  if (GetArena() == nullptr && postaladdress_ != nullptr) {
    delete postaladdress_;
  }
  postaladdress_ = nullptr;
}
Ident::Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  privextra_(arena),
  pubextra_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.Ident)
}
Ident::Ident(const Ident& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      privextra_(from.privextra_),
      pubextra_(from.pubextra_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  surname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_surname().empty()) {
    surname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_surname(),
      GetArena());
  }
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_givenname().empty()) {
    givenname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_givenname(),
      GetArena());
  }
  placeofbirth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_placeofbirth().empty()) {
    placeofbirth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_placeofbirth(),
      GetArena());
  }
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pin().empty()) {
    pin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pin(),
      GetArena());
  }
  photo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_photo().empty()) {
    photo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_photo(),
      GetArena());
  }
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uin().empty()) {
    uin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uin(),
      GetArena());
  }
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fullname().empty()) {
    fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fullname(),
      GetArena());
  }
  if (from._internal_has_dateofbirth()) {
    dateofbirth_ = new ::idpass::Date(*from.dateofbirth_);
  } else {
    dateofbirth_ = nullptr;
  }
  if (from._internal_has_photos()) {
    photos_ = new ::api::byteArrays(*from.photos_);
  } else {
    photos_ = nullptr;
  }
  if (from._internal_has_postaladdress()) {
    postaladdress_ = new ::idpass::PostalAddress(*from.postaladdress_);
  } else {
    postaladdress_ = nullptr;
  }
  gender_ = from.gender_;
  // @@protoc_insertion_point(copy_constructor:api.Ident)
}

void Ident::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ident_api_2eproto.base);
  surname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeofbirth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  photo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dateofbirth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gender_) -
      reinterpret_cast<char*>(&dateofbirth_)) + sizeof(gender_));
}

Ident::~Ident() {
  // @@protoc_insertion_point(destructor:api.Ident)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ident::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  surname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  givenname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  placeofbirth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  photo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dateofbirth_;
  if (this != internal_default_instance()) delete photos_;
  if (this != internal_default_instance()) delete postaladdress_;
}

void Ident::ArenaDtor(void* object) {
  Ident* _this = reinterpret_cast< Ident* >(object);
  (void)_this;
}
void Ident::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ident& Ident::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ident_api_2eproto.base);
  return *internal_default_instance();
}


void Ident::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privextra_.Clear();
  pubextra_.Clear();
  surname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  givenname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeofbirth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  photo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && dateofbirth_ != nullptr) {
    delete dateofbirth_;
  }
  dateofbirth_ = nullptr;
  if (GetArena() == nullptr && photos_ != nullptr) {
    delete photos_;
  }
  photos_ = nullptr;
  if (GetArena() == nullptr && postaladdress_ != nullptr) {
    delete postaladdress_;
  }
  postaladdress_ = nullptr;
  gender_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ident::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string surName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_surname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Ident.surName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string givenName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_givenname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Ident.givenName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string placeOfBirth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_placeofbirth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Ident.placeOfBirth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Ident.pin"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .idpass.Date dateOfBirth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dateofbirth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .api.byteArrays photos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_photos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes photo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_photo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .idpass.Pair privExtra = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_privextra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .idpass.Pair pubExtra = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pubextra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // string UIN = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_uin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Ident.UIN"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fullName = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_fullname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "api.Ident.fullName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gender = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .idpass.PostalAddress postalAddress = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_postaladdress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ident::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string surName = 1;
  if (this->surname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_surname().data(), static_cast<int>(this->_internal_surname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Ident.surName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_surname(), target);
  }

  // string givenName = 2;
  if (this->givenname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_givenname().data(), static_cast<int>(this->_internal_givenname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Ident.givenName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_givenname(), target);
  }

  // string placeOfBirth = 3;
  if (this->placeofbirth().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_placeofbirth().data(), static_cast<int>(this->_internal_placeofbirth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Ident.placeOfBirth");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_placeofbirth(), target);
  }

  // string pin = 4;
  if (this->pin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pin().data(), static_cast<int>(this->_internal_pin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Ident.pin");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pin(), target);
  }

  // .idpass.Date dateOfBirth = 5;
  if (this->has_dateofbirth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dateofbirth(this), target, stream);
  }

  // .api.byteArrays photos = 6;
  if (this->has_photos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::photos(this), target, stream);
  }

  // bytes photo = 7;
  if (this->photo().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_photo(), target);
  }

  // repeated .idpass.Pair privExtra = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_privextra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_privextra(i), target, stream);
  }

  // repeated .idpass.Pair pubExtra = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pubextra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_pubextra(i), target, stream);
  }

  // string UIN = 10;
  if (this->uin().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uin().data(), static_cast<int>(this->_internal_uin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Ident.UIN");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uin(), target);
  }

  // string fullName = 11;
  if (this->fullname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "api.Ident.fullName");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_fullname(), target);
  }

  // int32 gender = 12;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_gender(), target);
  }

  // .idpass.PostalAddress postalAddress = 13;
  if (this->has_postaladdress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::postaladdress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Ident)
  return target;
}

size_t Ident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Ident)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idpass.Pair privExtra = 8;
  total_size += 1UL * this->_internal_privextra_size();
  for (const auto& msg : this->privextra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .idpass.Pair pubExtra = 9;
  total_size += 1UL * this->_internal_pubextra_size();
  for (const auto& msg : this->pubextra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string surName = 1;
  if (this->surname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_surname());
  }

  // string givenName = 2;
  if (this->givenname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_givenname());
  }

  // string placeOfBirth = 3;
  if (this->placeofbirth().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_placeofbirth());
  }

  // string pin = 4;
  if (this->pin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pin());
  }

  // bytes photo = 7;
  if (this->photo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_photo());
  }

  // string UIN = 10;
  if (this->uin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uin());
  }

  // string fullName = 11;
  if (this->fullname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fullname());
  }

  // .idpass.Date dateOfBirth = 5;
  if (this->has_dateofbirth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dateofbirth_);
  }

  // .api.byteArrays photos = 6;
  if (this->has_photos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *photos_);
  }

  // .idpass.PostalAddress postalAddress = 13;
  if (this->has_postaladdress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *postaladdress_);
  }

  // int32 gender = 12;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gender());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ident::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  const Ident* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ident>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Ident)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Ident)
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  privextra_.MergeFrom(from.privextra_);
  pubextra_.MergeFrom(from.pubextra_);
  if (from.surname().size() > 0) {
    _internal_set_surname(from._internal_surname());
  }
  if (from.givenname().size() > 0) {
    _internal_set_givenname(from._internal_givenname());
  }
  if (from.placeofbirth().size() > 0) {
    _internal_set_placeofbirth(from._internal_placeofbirth());
  }
  if (from.pin().size() > 0) {
    _internal_set_pin(from._internal_pin());
  }
  if (from.photo().size() > 0) {
    _internal_set_photo(from._internal_photo());
  }
  if (from.uin().size() > 0) {
    _internal_set_uin(from._internal_uin());
  }
  if (from.fullname().size() > 0) {
    _internal_set_fullname(from._internal_fullname());
  }
  if (from.has_dateofbirth()) {
    _internal_mutable_dateofbirth()->::idpass::Date::MergeFrom(from._internal_dateofbirth());
  }
  if (from.has_photos()) {
    _internal_mutable_photos()->::api::byteArrays::MergeFrom(from._internal_photos());
  }
  if (from.has_postaladdress()) {
    _internal_mutable_postaladdress()->::idpass::PostalAddress::MergeFrom(from._internal_postaladdress());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
}

void Ident::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  return true;
}

void Ident::InternalSwap(Ident* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  privextra_.InternalSwap(&other->privextra_);
  pubextra_.InternalSwap(&other->pubextra_);
  surname_.Swap(&other->surname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  givenname_.Swap(&other->givenname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  placeofbirth_.Swap(&other->placeofbirth_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pin_.Swap(&other->pin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  photo_.Swap(&other->photo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uin_.Swap(&other->uin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ident, gender_)
      + sizeof(Ident::gender_)
      - PROTOBUF_FIELD_OFFSET(Ident, dateofbirth_)>(
          reinterpret_cast<char*>(&dateofbirth_),
          reinterpret_cast<char*>(&other->dateofbirth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ident::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Idents::InitAsDefaultInstance() {
}
class Idents::_Internal {
 public:
};

Idents::Idents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ident_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:api.Idents)
}
Idents::Idents(const Idents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ident_(from.ident_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:api.Idents)
}

void Idents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Idents_api_2eproto.base);
}

Idents::~Idents() {
  // @@protoc_insertion_point(destructor:api.Idents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Idents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Idents::ArenaDtor(void* object) {
  Idents* _this = reinterpret_cast< Idents* >(object);
  (void)_this;
}
void Idents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Idents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Idents& Idents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Idents_api_2eproto.base);
  return *internal_default_instance();
}


void Idents::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Idents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ident_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Idents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .api.Ident ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ident(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Idents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Idents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .api.Ident ident = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ident_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ident(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:api.Idents)
  return target;
}

size_t Idents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:api.Idents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .api.Ident ident = 1;
  total_size += 1UL * this->_internal_ident_size();
  for (const auto& msg : this->ident_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Idents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Idents)
  GOOGLE_DCHECK_NE(&from, this);
  const Idents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Idents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Idents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Idents)
    MergeFrom(*source);
  }
}

void Idents::MergeFrom(const Idents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Idents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ident_.MergeFrom(from.ident_);
}

void Idents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Idents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Idents::CopyFrom(const Idents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Idents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Idents::IsInitialized() const {
  return true;
}

void Idents::InternalSwap(Idents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ident_.InternalSwap(&other->ident_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Idents::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::api::byteArray* Arena::CreateMaybeMessage< ::api::byteArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::byteArray >(arena);
}
template<> PROTOBUF_NOINLINE ::api::byteArrays* Arena::CreateMaybeMessage< ::api::byteArrays >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::byteArrays >(arena);
}
template<> PROTOBUF_NOINLINE ::api::KeySet* Arena::CreateMaybeMessage< ::api::KeySet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::KeySet >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Certificates* Arena::CreateMaybeMessage< ::api::Certificates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Certificates >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Ident* Arena::CreateMaybeMessage< ::api::Ident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Ident >(arena);
}
template<> PROTOBUF_NOINLINE ::api::Idents* Arena::CreateMaybeMessage< ::api::Idents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::api::Idents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
